/* CssParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CssParserTokenManager.java */
package org.w3c.css.parser.analyzer;
import org.w3c.css.atrules.css.AtRuleCounterStyle;
import org.w3c.css.atrules.css.AtRuleFontFace;
import org.w3c.css.atrules.css.AtRuleKeyframes;
import org.w3c.css.atrules.css.AtRuleMedia;
import org.w3c.css.atrules.css.AtRulePage;
import org.w3c.css.atrules.css.AtRulePhoneticAlphabet;
import org.w3c.css.atrules.css.AtRulePreference;
import org.w3c.css.atrules.css.AtRuleSupports;
import org.w3c.css.atrules.css.AtRuleViewport;
import org.w3c.css.atrules.css.media.MediaFeature;
import org.w3c.css.atrules.css.media.MediaRangeFeature;
import org.w3c.css.atrules.css.supports.SupportsFeature;
import org.w3c.css.atrules.svg.AtRuleColorProfile;
import org.w3c.css.parser.AtRule;
import org.w3c.css.parser.CssError;
import org.w3c.css.parser.CssErrorToken;
import org.w3c.css.parser.CssParseException;
import org.w3c.css.parser.CssSelectors;
import org.w3c.css.properties.css.CssProperty;
import org.w3c.css.selectors.AttributeSelector;
import org.w3c.css.selectors.ClassSelector;
import org.w3c.css.selectors.IdSelector;
import org.w3c.css.selectors.TypeSelector;
import org.w3c.css.selectors.UniversalSelector;
import org.w3c.css.selectors.attributes.AttributeAny;
import org.w3c.css.selectors.attributes.AttributeBegin;
import org.w3c.css.selectors.attributes.AttributeExact;
import org.w3c.css.selectors.attributes.AttributeOneOf;
import org.w3c.css.selectors.attributes.AttributeStart;
import org.w3c.css.selectors.attributes.AttributeSubstr;
import org.w3c.css.selectors.attributes.AttributeSuffix;
import org.w3c.css.util.ApplContext;
import org.w3c.css.util.CssProfile;
import org.w3c.css.util.CssVersion;
import org.w3c.css.util.InvalidParamException;
import org.w3c.css.util.StringUtils;
import org.w3c.css.util.Util;
import org.w3c.css.util.WarningParamException;
import org.w3c.css.values.CssANPlusB;
import org.w3c.css.values.CssAngle;
import org.w3c.css.values.CssAttr;
import org.w3c.css.values.CssBracket;
import org.w3c.css.values.CssCalc;
import org.w3c.css.values.CssCheckableValue;
import org.w3c.css.values.CssColor;
import org.w3c.css.values.CssComparator;
import org.w3c.css.values.CssExpression;
import org.w3c.css.values.CssFlexibleLength;
import org.w3c.css.values.CssFrequency;
import org.w3c.css.values.CssFunction;
import org.w3c.css.values.CssHashIdent;
import org.w3c.css.values.CssIdent;
import org.w3c.css.values.CssImage;
import org.w3c.css.values.CssLength;
import org.w3c.css.values.CssMathFunction;
import org.w3c.css.values.CssNumber;
import org.w3c.css.values.CssOperator;
import org.w3c.css.values.CssPercentage;
import org.w3c.css.values.CssRatio;
import org.w3c.css.values.CssResolution;
import org.w3c.css.values.CssSemitone;
import org.w3c.css.values.CssString;
import org.w3c.css.values.CssSwitch;
import org.w3c.css.values.CssTime;
import org.w3c.css.values.CssTypes;
import org.w3c.css.values.CssURL;
import org.w3c.css.values.CssUnicodeRange;
import org.w3c.css.values.CssValue;
import org.w3c.css.values.CssVariable;
import org.w3c.css.values.CssVolume;
import static org.w3c.css.util.StringUtils.convertIdent;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings("unused")public class CssParserTokenManager implements CssParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 144;
         return jjMoveNfa_0(7, 0);
      case 36:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 146;
         return jjMoveNfa_0(7, 0);
      case 38:
         jjmatchedKind = 147;
         return jjMoveNfa_0(7, 0);
      case 40:
         jjmatchedKind = 58;
         return jjMoveNfa_0(7, 0);
      case 41:
         jjmatchedKind = 57;
         return jjMoveNfa_0(7, 0);
      case 42:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L, 0x0L);
      case 45:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 56;
         return jjMoveNfa_0(7, 0);
      case 47:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 59:
         jjmatchedKind = 51;
         return jjMoveNfa_0(7, 0);
      case 60:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x1000000L);
      case 61:
         jjmatchedKind = 50;
         return jjMoveNfa_0(7, 0);
      case 63:
         jjmatchedKind = 149;
         return jjMoveNfa_0(7, 0);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffffff8000L, 0x0L);
      case 91:
         jjmatchedKind = 53;
         return jjMoveNfa_0(7, 0);
      case 93:
         jjmatchedKind = 54;
         return jjMoveNfa_0(7, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 96:
         jjmatchedKind = 148;
         return jjMoveNfa_0(7, 0);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xd000000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x7fL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x0L);
      case 124:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 46;
         return jjMoveNfa_0(7, 0);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 42:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L);
      case 58:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 1;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1100000000000000L, active2, 0x1000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7c00000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x38000008000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000200000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000038000000L, active2, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2800000000L, active1, 0x400000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0xc000000000000000L, active2, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x44000010000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400080000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3e0000L, active2, 0x83fL);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400010000L, active2, 0x400L);
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800002838000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008000L, active2, 0x3fL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1001c0000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000039007fe0000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200004000000000L, active2, 0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xd000000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x840L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
         }
         break;
      case 45:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x3fL);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x104000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x38000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000001c0010000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000L, active2, 0x400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x802003e0000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L, active2, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe000000007c00000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 4;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000000003e0000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x5L);
      case 69:
      case 101:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x800000400000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active1, 0x6000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active1, 0x1c0000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x2aL);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active1, 0x70000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x8200000000L, active2, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000000000L, active2, 0x400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x8000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active1, 0x200000103fc00000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 5;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa6_0(active1, 0x1038000000L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x2aL);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active1, 0x8000000000080000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active1, 0x2000044000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x10L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x60000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active1, 0x80007c00000L, active2, 0x4L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x100000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active1, 0xa200300000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active1, 0x400008000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active1, 0x301c0000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active1, 0x81c0000000L, active2, 0x10L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active1, 0x300000e8000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active1, 0x300000L, active2, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active1, 0x17c00000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x8000100000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active1, 0x400000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active1, 0x84000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x2aL);
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x40008000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 7;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa8_0(active1, 0x7c00000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x1400000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active1, 0x100000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active1, 0x4000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active1, 0x60000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active1, 0x300000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x40010000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x1L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active1, 0x2080000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x8000000000080000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x28000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x8000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x120000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x80040000000L, active2, 0x3aL);
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000L, active2, 0x2aL);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x41401000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active1, 0x10000000L, active2, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active1, 0x300000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0xc00000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x140000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
         }
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x8006000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 8;
         }
         break;
      case 84:
      case 116:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x80000000200a0000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000020000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L, active2, 0xaL);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active1, 0x90000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000001c80000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x6000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000L, active2, 0x20L);
      case 80:
      case 112:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10L);
      case 83:
      case 115:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x20000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x120200000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 9);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active1, 0x200000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x40000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active1, 0x80000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000c00000L, active2, 0x20L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active1, 0x6000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000000L, active2, 0x8L);
      case 82:
      case 114:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 10;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x20100000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 10);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 11;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0x200000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 11;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active1, 0x6000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000000L, active2, 0x2L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0x40080000000L, active2, 0x8L);
      case 77:
      case 109:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 11;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0x100020000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000001400000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 11);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 12;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 12;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x1000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x28000000000L, active2, 0x2L);
      case 77:
      case 109:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 12;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x200000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active1, 0x40000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x4000000L, active2, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 12);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active1, 0x4000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0x400000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x2L);
      case 69:
      case 101:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 13;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0x200000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 13);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 14;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0x4000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x20L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 14);
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active1, 0x200000L, active2, 0x20L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x4000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active1, 0x400000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 15);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 15);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 16;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0x400000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active1, 0x4000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 16);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active1, 0x4000000L);
      case 84:
      case 116:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 17);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 17);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x4000000L);
      case 82:
      case 114:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 18;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 18);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 18);
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 19);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 1068;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     { jjCheckNAddStates(0, 173); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(174, 199); }
                  }
                  else if (curChar == 33)
                     { jjCheckNAddStates(200, 203); }
                  else if (curChar == 46)
                     { jjCheckNAddStates(204, 234); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(235, 239); }
                  else if (curChar == 45)
                     { jjAddStates(240, 244); }
                  else if (curChar == 39)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(245, 249); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAddStates(250, 254); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 228;
                  else if (curChar == 44)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 43)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 45)
                     { jjAddStates(255, 256); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(257, 261); }
                  else if (curChar == 62)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 42)
                     { jjCheckNAddStates(262, 264); }
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(265, 267); }
                  break;
               case 6:
                  if (curChar == 47 && kind > 1)
                     kind = 1;
                  break;
               case 9:
                  if (curChar == 43 && kind > 28)
                     kind = 28;
                  break;
               case 10:
                  if (curChar == 62 && kind > 30)
                     kind = 30;
                  break;
               case 11:
                  if (curChar == 61 && kind > 31)
                     kind = 31;
                  break;
               case 12:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 44 && kind > 32)
                     kind = 32;
                  break;
               case 16:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     { jjAddStates(268, 269); }
                  break;
               case 19:
                  if (curChar == 41 && kind > 44)
                     kind = 44;
                  break;
               case 29:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 46:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 54:
                  if (curChar == 45)
                     { jjAddStates(270, 271); }
                  break;
               case 56:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 58:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(272, 276); }
                  break;
               case 60:
                  if (curChar != 10)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 61:
               case 70:
                  if (curChar == 13)
                     { jjCheckNAdd(60); }
                  break;
               case 62:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(277, 284); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(285, 288); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(289, 293); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(294, 299); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(300, 306); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(307, 311); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(312, 319); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(320, 323); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(324, 328); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(329, 334); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(335, 341); }
                  break;
               case 76:
                  if (curChar == 40 && kind > 136)
                     kind = 136;
                  break;
               case 82:
                  if (curChar == 40 && kind > 137)
                     kind = 137;
                  break;
               case 92:
                  if (curChar == 60)
                     { jjCheckNAddStates(257, 261); }
                  break;
               case 94:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(342, 346); }
                  break;
               case 95:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 96:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 97:
                  if (curChar == 42)
                     { jjCheckNAddStates(347, 349); }
                  break;
               case 98:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 99:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 100:
                  if (curChar == 42)
                     { jjCheckNAddStates(350, 352); }
                  break;
               case 101:
                  if (curChar == 47)
                     { jjCheckNAddStates(342, 346); }
                  break;
               case 102:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 103:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(104, 213); }
                  break;
               case 105:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(353, 358); }
                  break;
               case 106:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(359, 364); }
                  break;
               case 107:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(108, 109); }
                  break;
               case 108:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(108, 109); }
                  break;
               case 109:
                  if (curChar == 42)
                     { jjCheckNAddStates(365, 367); }
                  break;
               case 110:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(111, 112); }
                  break;
               case 111:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(111, 112); }
                  break;
               case 112:
                  if (curChar == 42)
                     { jjCheckNAddStates(368, 370); }
                  break;
               case 113:
                  if (curChar == 47)
                     { jjCheckNAddStates(359, 364); }
                  break;
               case 114:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 115:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(116, 132); }
                  break;
               case 117:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 118:
                  if (curChar == 61)
                     { jjCheckNAddStates(374, 378); }
                  break;
               case 119:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(120, 162); }
                  break;
               case 121:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(379, 384); }
                  break;
               case 122:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(385, 390); }
                  break;
               case 123:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(124, 125); }
                  break;
               case 124:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(124, 125); }
                  break;
               case 125:
                  if (curChar == 42)
                     { jjCheckNAddStates(391, 393); }
                  break;
               case 126:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 127:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 128:
                  if (curChar == 42)
                     { jjCheckNAddStates(394, 396); }
                  break;
               case 129:
                  if (curChar == 47)
                     { jjCheckNAddStates(385, 390); }
                  break;
               case 130:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 131:
                  if (curChar == 62 && kind > 142)
                     kind = 142;
                  break;
               case 133:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(397, 402); }
                  break;
               case 136:
                  if (curChar == 10)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 137:
               case 145:
                  if (curChar == 13)
                     { jjCheckNAdd(136); }
                  break;
               case 138:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(403, 411); }
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(412, 416); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(417, 422); }
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(423, 429); }
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(430, 437); }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(438, 443); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(444, 452); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(453, 457); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(458, 463); }
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(464, 470); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(471, 478); }
                  break;
               case 152:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(379, 384); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(479, 486); }
                  break;
               case 154:
                  if (curChar == 10)
                     { jjCheckNAddStates(379, 384); }
                  break;
               case 155:
               case 164:
                  if (curChar == 13)
                     { jjCheckNAdd(154); }
                  break;
               case 156:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(487, 495); }
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(496, 506); }
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(507, 513); }
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(514, 521); }
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(522, 530); }
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(531, 540); }
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(541, 548); }
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(549, 559); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(560, 566); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(567, 574); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(575, 583); }
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(584, 593); }
                  break;
               case 170:
                  if (curChar == 34)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 171:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 172:
                  if (curChar == 34)
                     { jjCheckNAddStates(597, 601); }
                  break;
               case 174:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 175:
                  if (curChar == 10)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 176:
               case 179:
                  if (curChar == 13)
                     { jjCheckNAdd(175); }
                  break;
               case 177:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(602, 607); }
                  break;
               case 180:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(608, 616); }
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(617, 621); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(622, 627); }
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(628, 634); }
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(635, 642); }
                  break;
               case 186:
                  if (curChar == 39)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 187:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 188:
                  if (curChar == 39)
                     { jjCheckNAddStates(597, 601); }
                  break;
               case 190:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 191:
                  if (curChar == 10)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 192:
               case 195:
                  if (curChar == 13)
                     { jjCheckNAdd(191); }
                  break;
               case 193:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 194:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(646, 651); }
                  break;
               case 196:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(652, 660); }
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(661, 665); }
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(666, 671); }
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(672, 678); }
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(679, 686); }
                  break;
               case 203:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(353, 358); }
                  break;
               case 204:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(687, 694); }
                  break;
               case 205:
                  if (curChar == 10)
                     { jjCheckNAddStates(353, 358); }
                  break;
               case 206:
               case 215:
                  if (curChar == 13)
                     { jjCheckNAdd(205); }
                  break;
               case 207:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(695, 703); }
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(704, 714); }
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(715, 721); }
                  break;
               case 210:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(722, 729); }
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(730, 738); }
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(739, 748); }
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(749, 756); }
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(757, 767); }
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(768, 774); }
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(775, 782); }
                  break;
               case 219:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(783, 791); }
                  break;
               case 220:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(792, 801); }
                  break;
               case 227:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 47)
                     { jjCheckNAddStates(802, 805); }
                  break;
               case 229:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(806, 810); }
                  break;
               case 230:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(231, 232); }
                  break;
               case 231:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(231, 232); }
                  break;
               case 232:
                  if (curChar == 42)
                     { jjCheckNAddStates(811, 813); }
                  break;
               case 233:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(234, 235); }
                  break;
               case 234:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(234, 235); }
                  break;
               case 235:
                  if (curChar == 42)
                     { jjCheckNAddStates(814, 816); }
                  break;
               case 236:
                  if (curChar == 47)
                     { jjCheckNAddStates(806, 810); }
                  break;
               case 237:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 238:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(239, 262); }
                  break;
               case 240:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(817, 820); }
                  break;
               case 241:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(821, 823); }
                  break;
               case 242:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(243, 244); }
                  break;
               case 243:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(243, 244); }
                  break;
               case 244:
                  if (curChar == 42)
                     { jjCheckNAddStates(824, 826); }
                  break;
               case 245:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(246, 247); }
                  break;
               case 246:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(246, 247); }
                  break;
               case 247:
                  if (curChar == 42)
                     { jjCheckNAddStates(827, 829); }
                  break;
               case 248:
                  if (curChar == 47)
                     { jjCheckNAddStates(821, 823); }
                  break;
               case 249:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 250:
                  if (curChar == 62 && kind > 143)
                     kind = 143;
                  break;
               case 252:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(817, 820); }
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(830, 835); }
                  break;
               case 254:
                  if (curChar == 10)
                     { jjCheckNAddStates(817, 820); }
                  break;
               case 255:
               case 264:
                  if (curChar == 13)
                     { jjCheckNAdd(254); }
                  break;
               case 256:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(836, 841); }
                  break;
               case 257:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(842, 850); }
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(851, 855); }
                  break;
               case 259:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(856, 861); }
                  break;
               case 260:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(862, 868); }
                  break;
               case 261:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(869, 876); }
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(877, 882); }
                  break;
               case 265:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(883, 891); }
                  break;
               case 266:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(892, 896); }
                  break;
               case 267:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(897, 902); }
                  break;
               case 268:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(903, 909); }
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(910, 917); }
                  break;
               case 270:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 295:
                  if (curChar == 45)
                     { jjAddStates(255, 256); }
                  break;
               case 296:
                  if (curChar == 40 && kind > 135)
                     kind = 135;
                  break;
               case 301:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 309:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 316:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(174, 199); }
                  break;
               case 317:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(318, 319); }
                  break;
               case 318:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(318, 319); }
                  break;
               case 319:
                  if (curChar == 42)
                     { jjCheckNAddStates(918, 920); }
                  break;
               case 320:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(321, 322); }
                  break;
               case 321:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(321, 322); }
                  break;
               case 322:
                  if (curChar == 42)
                     { jjCheckNAddStates(921, 923); }
                  break;
               case 323:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 324:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 325:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 326:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(327, 328); }
                  break;
               case 327:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(327, 328); }
                  break;
               case 328:
                  if (curChar == 42)
                     { jjCheckNAddStates(924, 926); }
                  break;
               case 329:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(330, 331); }
                  break;
               case 330:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(330, 331); }
                  break;
               case 331:
                  if (curChar == 42)
                     { jjCheckNAddStates(927, 929); }
                  break;
               case 332:
                  if (curChar == 47)
                     { jjCheckNAddStates(930, 932); }
                  break;
               case 333:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 334:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(930, 932); }
                  break;
               case 336:
                  if (curChar == 61 && kind > 25)
                     kind = 25;
                  break;
               case 337:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 338:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(338, 339); }
                  break;
               case 339:
                  if (curChar == 42)
                     { jjCheckNAddStates(933, 935); }
                  break;
               case 340:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(341, 342); }
                  break;
               case 341:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(341, 342); }
                  break;
               case 342:
                  if (curChar == 42)
                     { jjCheckNAddStates(936, 938); }
                  break;
               case 343:
                  if (curChar == 47)
                     { jjCheckNAddStates(939, 941); }
                  break;
               case 344:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 337;
                  break;
               case 345:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(939, 941); }
                  break;
               case 346:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(347, 348); }
                  break;
               case 347:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(347, 348); }
                  break;
               case 348:
                  if (curChar == 42)
                     { jjCheckNAddStates(942, 944); }
                  break;
               case 349:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(350, 351); }
                  break;
               case 350:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(350, 351); }
                  break;
               case 351:
                  if (curChar == 42)
                     { jjCheckNAddStates(945, 947); }
                  break;
               case 352:
                  if (curChar == 47)
                     { jjCheckNAddStates(948, 950); }
                  break;
               case 353:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 346;
                  break;
               case 354:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(948, 950); }
                  break;
               case 355:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(356, 357); }
                  break;
               case 356:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(356, 357); }
                  break;
               case 357:
                  if (curChar == 42)
                     { jjCheckNAddStates(951, 953); }
                  break;
               case 358:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(359, 360); }
                  break;
               case 359:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(359, 360); }
                  break;
               case 360:
                  if (curChar == 42)
                     { jjCheckNAddStates(954, 956); }
                  break;
               case 361:
                  if (curChar == 47)
                     { jjCheckNAddStates(957, 959); }
                  break;
               case 362:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 355;
                  break;
               case 363:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(957, 959); }
                  break;
               case 364:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(365, 366); }
                  break;
               case 365:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(365, 366); }
                  break;
               case 366:
                  if (curChar == 42)
                     { jjCheckNAddStates(960, 962); }
                  break;
               case 367:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(368, 369); }
                  break;
               case 368:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(368, 369); }
                  break;
               case 369:
                  if (curChar == 42)
                     { jjCheckNAddStates(963, 965); }
                  break;
               case 370:
                  if (curChar == 47)
                     { jjCheckNAddStates(966, 968); }
                  break;
               case 371:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 364;
                  break;
               case 372:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(966, 968); }
                  break;
               case 373:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(374, 375); }
                  break;
               case 374:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(374, 375); }
                  break;
               case 375:
                  if (curChar == 42)
                     { jjCheckNAddStates(969, 971); }
                  break;
               case 376:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(377, 378); }
                  break;
               case 377:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(377, 378); }
                  break;
               case 378:
                  if (curChar == 42)
                     { jjCheckNAddStates(972, 974); }
                  break;
               case 379:
                  if (curChar == 47)
                     { jjCheckNAddStates(975, 977); }
                  break;
               case 380:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 373;
                  break;
               case 381:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(975, 977); }
                  break;
               case 382:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(383, 384); }
                  break;
               case 383:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(383, 384); }
                  break;
               case 384:
                  if (curChar == 42)
                     { jjCheckNAddStates(978, 980); }
                  break;
               case 385:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(386, 387); }
                  break;
               case 386:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(386, 387); }
                  break;
               case 387:
                  if (curChar == 42)
                     { jjCheckNAddStates(981, 983); }
                  break;
               case 388:
                  if (curChar == 47)
                     { jjCheckNAddStates(984, 986); }
                  break;
               case 389:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 390:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(984, 986); }
                  break;
               case 392:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(393, 394); }
                  break;
               case 393:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(393, 394); }
                  break;
               case 394:
                  if (curChar == 42)
                     { jjCheckNAddStates(987, 989); }
                  break;
               case 395:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(396, 397); }
                  break;
               case 396:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(396, 397); }
                  break;
               case 397:
                  if (curChar == 42)
                     { jjCheckNAddStates(990, 992); }
                  break;
               case 398:
                  if (curChar == 47)
                     { jjCheckNAddStates(993, 995); }
                  break;
               case 399:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 392;
                  break;
               case 400:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(993, 995); }
                  break;
               case 402:
                  if (curChar != 34)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(250, 254); }
                  break;
               case 403:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 404:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 406:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 407:
                  if (curChar == 10)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 408:
               case 411:
                  if (curChar == 13)
                     { jjCheckNAdd(407); }
                  break;
               case 409:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 410:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(999, 1004); }
                  break;
               case 412:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 413:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1005, 1013); }
                  break;
               case 414:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1014, 1018); }
                  break;
               case 415:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1019, 1024); }
                  break;
               case 416:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1025, 1031); }
                  break;
               case 417:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1032, 1039); }
                  break;
               case 418:
                  if ((0xfffffffbffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 420:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 421:
                  if (curChar != 10)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 422:
               case 425:
                  if (curChar == 13)
                     { jjCheckNAdd(421); }
                  break;
               case 423:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 424:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1040, 1044); }
                  break;
               case 426:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 427:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1045, 1052); }
                  break;
               case 428:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1053, 1056); }
                  break;
               case 429:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1057, 1061); }
                  break;
               case 430:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1062, 1067); }
                  break;
               case 431:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1068, 1074); }
                  break;
               case 432:
                  if (curChar != 39)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(245, 249); }
                  break;
               case 433:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 434:
                  if (curChar == 39 && kind > 39)
                     kind = 39;
                  break;
               case 436:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 437:
                  if (curChar == 10)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 438:
               case 441:
                  if (curChar == 13)
                     { jjCheckNAdd(437); }
                  break;
               case 439:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 440:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1078, 1083); }
                  break;
               case 442:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 443:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1084, 1092); }
                  break;
               case 444:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1093, 1097); }
                  break;
               case 445:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1098, 1103); }
                  break;
               case 446:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1104, 1110); }
                  break;
               case 447:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1111, 1118); }
                  break;
               case 448:
                  if ((0xffffff7fffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 450:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 451:
                  if (curChar != 10)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 452:
               case 455:
                  if (curChar == 13)
                     { jjCheckNAdd(451); }
                  break;
               case 453:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 454:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1119, 1123); }
                  break;
               case 456:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 457:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1124, 1131); }
                  break;
               case 458:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1132, 1135); }
                  break;
               case 459:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1136, 1140); }
                  break;
               case 460:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1141, 1146); }
                  break;
               case 461:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1147, 1153); }
                  break;
               case 462:
                  if (curChar == 45)
                     { jjAddStates(240, 244); }
                  break;
               case 464:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 466:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 467:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1154, 1158); }
                  break;
               case 468:
                  if (curChar != 10)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 469:
               case 522:
                  if (curChar == 13)
                     { jjCheckNAdd(468); }
                  break;
               case 470:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 471:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1159, 1166); }
                  break;
               case 472:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1167, 1170); }
                  break;
               case 473:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1171, 1175); }
                  break;
               case 474:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1176, 1181); }
                  break;
               case 475:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1182, 1188); }
                  break;
               case 476:
                  if (curChar != 45)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjAddStates(1189, 1190); }
                  break;
               case 478:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 480:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 481:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1191, 1195); }
                  break;
               case 482:
                  if (curChar != 10)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 483:
               case 492:
                  if (curChar == 13)
                     { jjCheckNAdd(482); }
                  break;
               case 484:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 485:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1196, 1203); }
                  break;
               case 486:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1204, 1207); }
                  break;
               case 487:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1208, 1212); }
                  break;
               case 488:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1213, 1218); }
                  break;
               case 489:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1219, 1225); }
                  break;
               case 491:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1226, 1230); }
                  break;
               case 493:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1231, 1238); }
                  break;
               case 494:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1239, 1242); }
                  break;
               case 495:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1243, 1247); }
                  break;
               case 496:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1248, 1253); }
                  break;
               case 497:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1254, 1260); }
                  break;
               case 499:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 500:
                  if (curChar == 40 && kind > 141)
                     kind = 141;
                  break;
               case 502:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 503:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1264, 1269); }
                  break;
               case 504:
                  if (curChar == 10)
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 505:
               case 514:
                  if (curChar == 13)
                     { jjCheckNAdd(504); }
                  break;
               case 506:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 507:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1270, 1278); }
                  break;
               case 508:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1279, 1283); }
                  break;
               case 509:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1284, 1289); }
                  break;
               case 510:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1290, 1296); }
                  break;
               case 511:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1297, 1304); }
                  break;
               case 513:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1305, 1310); }
                  break;
               case 515:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1311, 1319); }
                  break;
               case 516:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1320, 1324); }
                  break;
               case 517:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1325, 1330); }
                  break;
               case 518:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1331, 1337); }
                  break;
               case 519:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1338, 1345); }
                  break;
               case 521:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1346, 1350); }
                  break;
               case 523:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1351, 1358); }
                  break;
               case 524:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1359, 1362); }
                  break;
               case 525:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1363, 1367); }
                  break;
               case 526:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1368, 1373); }
                  break;
               case 527:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1374, 1380); }
                  break;
               case 529:
                  if (curChar == 35)
                     { jjCheckNAddStates(235, 239); }
                  break;
               case 530:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(531, 544); }
                  break;
               case 532:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 534:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 535:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1381, 1385); }
                  break;
               case 536:
                  if (curChar != 10)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 537:
               case 546:
                  if (curChar == 13)
                     { jjCheckNAdd(536); }
                  break;
               case 538:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 539:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1386, 1393); }
                  break;
               case 540:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1394, 1397); }
                  break;
               case 541:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1398, 1402); }
                  break;
               case 542:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1403, 1408); }
                  break;
               case 543:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1409, 1415); }
                  break;
               case 545:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1416, 1420); }
                  break;
               case 547:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1421, 1428); }
                  break;
               case 548:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1429, 1432); }
                  break;
               case 549:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1433, 1437); }
                  break;
               case 550:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1438, 1443); }
                  break;
               case 551:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1444, 1450); }
                  break;
               case 552:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 554:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 555:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1451, 1455); }
                  break;
               case 556:
                  if (curChar != 10)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 557:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 556;
                  break;
               case 558:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 559:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1456, 1463); }
                  break;
               case 560:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1464, 1467); }
                  break;
               case 561:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1468, 1472); }
                  break;
               case 562:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1473, 1478); }
                  break;
               case 563:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1479, 1485); }
                  break;
               case 565:
                  if (curChar == 40)
                     { jjCheckNAddStates(1486, 1491); }
                  break;
               case 566:
                  if (curChar == 34)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 567:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 568:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(569, 578); }
                  break;
               case 569:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1495, 1497); }
                  break;
               case 570:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(571, 572); }
                  break;
               case 571:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(571, 572); }
                  break;
               case 572:
                  if (curChar == 42)
                     { jjCheckNAddStates(1498, 1500); }
                  break;
               case 573:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(574, 575); }
                  break;
               case 574:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(574, 575); }
                  break;
               case 575:
                  if (curChar == 42)
                     { jjCheckNAddStates(1501, 1503); }
                  break;
               case 576:
                  if (curChar == 47)
                     { jjCheckNAddStates(1495, 1497); }
                  break;
               case 577:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 570;
                  break;
               case 578:
                  if (curChar == 41 && kind > 60)
                     kind = 60;
                  break;
               case 580:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 581:
                  if (curChar == 10)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 582:
               case 585:
                  if (curChar == 13)
                     { jjCheckNAdd(581); }
                  break;
               case 583:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 584:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1504, 1509); }
                  break;
               case 586:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 587:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1510, 1518); }
                  break;
               case 588:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1519, 1523); }
                  break;
               case 589:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1524, 1529); }
                  break;
               case 590:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1530, 1536); }
                  break;
               case 591:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1537, 1544); }
                  break;
               case 592:
                  if (curChar == 39)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 593:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 594:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(569, 578); }
                  break;
               case 596:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 597:
                  if (curChar == 10)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 598:
               case 601:
                  if (curChar == 13)
                     { jjCheckNAdd(597); }
                  break;
               case 599:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 600:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1548, 1553); }
                  break;
               case 602:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 603:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1554, 1562); }
                  break;
               case 604:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1563, 1567); }
                  break;
               case 605:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1568, 1573); }
                  break;
               case 606:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1574, 1580); }
                  break;
               case 607:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1581, 1588); }
                  break;
               case 608:
                  if ((0xfffffc7a00000000L & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 610:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 611:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1593, 1598); }
                  break;
               case 612:
                  if (curChar == 10)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 613:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 612;
                  break;
               case 614:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1599, 1604); }
                  break;
               case 615:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1605, 1613); }
                  break;
               case 616:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1614, 1618); }
                  break;
               case 617:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1619, 1624); }
                  break;
               case 618:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1625, 1631); }
                  break;
               case 619:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1632, 1639); }
                  break;
               case 620:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1640, 1648); }
                  break;
               case 621:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(622, 623); }
                  break;
               case 622:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(622, 623); }
                  break;
               case 623:
                  if (curChar == 42)
                     { jjCheckNAddStates(1649, 1651); }
                  break;
               case 624:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(625, 626); }
                  break;
               case 625:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(625, 626); }
                  break;
               case 626:
                  if (curChar == 42)
                     { jjCheckNAddStates(1652, 1654); }
                  break;
               case 627:
                  if (curChar == 47)
                     { jjCheckNAddStates(1655, 1661); }
                  break;
               case 628:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 621;
                  break;
               case 631:
                  if (curChar == 43)
                     { jjAddStates(1662, 1663); }
                  break;
               case 632:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 633;
                  break;
               case 633:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1664, 1667); }
                  break;
               case 634:
                  if (curChar == 63 && kind > 119)
                     kind = 119;
                  break;
               case 635:
               case 651:
               case 655:
               case 658:
               case 661:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(634); }
                  break;
               case 636:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(634, 635); }
                  break;
               case 637:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1668, 1670); }
                  break;
               case 638:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjAddStates(1671, 1676); }
                  break;
               case 639:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 640;
                  break;
               case 640:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 641;
                  break;
               case 641:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 642;
                  break;
               case 642:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(643); }
                  break;
               case 643:
                  if ((0x3ff000000000000L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 644:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 645;
                  break;
               case 645:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 646;
                  break;
               case 646:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 647;
                  break;
               case 647:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(634); }
                  break;
               case 648:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 649;
                  break;
               case 649:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 650;
                  break;
               case 650:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 651;
                  break;
               case 652:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 653;
                  break;
               case 653:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 654;
                  break;
               case 654:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(634, 655); }
                  break;
               case 656:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 657;
                  break;
               case 657:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1677, 1679); }
                  break;
               case 659:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(634, 658); }
                  break;
               case 660:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1680, 1683); }
                  break;
               case 662:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(634, 661); }
                  break;
               case 663:
                  if (curChar != 63)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1684, 1686); }
                  break;
               case 664:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 665;
                  break;
               case 665:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(666, 672); }
                  break;
               case 666:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 667;
                  break;
               case 667:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 668;
                  break;
               case 668:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1687, 1690); }
                  break;
               case 669:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(643); }
                  break;
               case 670:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(643, 669); }
                  break;
               case 671:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1691, 1693); }
                  break;
               case 672:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1694, 1698); }
                  break;
               case 673:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(666); }
                  break;
               case 674:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(673, 666); }
                  break;
               case 675:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1699, 1701); }
                  break;
               case 676:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1702, 1705); }
                  break;
               case 677:
                  if (curChar == 46)
                     { jjCheckNAddStates(204, 234); }
                  break;
               case 678:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1706, 1709); }
                  break;
               case 680:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(681); }
                  break;
               case 681:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1710, 1712); }
                  break;
               case 685:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1713, 1716); }
                  break;
               case 687:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(688); }
                  break;
               case 688:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1717, 1719); }
                  break;
               case 692:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1720, 1723); }
                  break;
               case 694:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(695); }
                  break;
               case 695:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1724, 1726); }
                  break;
               case 700:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1727, 1730); }
                  break;
               case 702:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(703); }
                  break;
               case 703:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1731, 1733); }
                  break;
               case 707:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1734, 1737); }
                  break;
               case 709:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(710); }
                  break;
               case 710:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1738, 1740); }
                  break;
               case 714:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1741, 1744); }
                  break;
               case 716:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(717); }
                  break;
               case 717:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1745, 1747); }
                  break;
               case 720:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1748, 1751); }
                  break;
               case 722:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(723); }
                  break;
               case 723:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1752, 1754); }
                  break;
               case 727:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1755, 1758); }
                  break;
               case 729:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(730); }
                  break;
               case 730:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1759, 1761); }
                  break;
               case 734:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1762, 1765); }
                  break;
               case 736:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(737); }
                  break;
               case 737:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1766, 1768); }
                  break;
               case 741:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1769, 1772); }
                  break;
               case 743:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(744); }
                  break;
               case 744:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1773, 1775); }
                  break;
               case 748:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1776, 1779); }
                  break;
               case 750:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(751); }
                  break;
               case 751:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1780, 1782); }
                  break;
               case 757:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1783, 1786); }
                  break;
               case 759:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(760); }
                  break;
               case 760:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1787, 1789); }
                  break;
               case 766:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1790, 1792); }
                  break;
               case 768:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(769); }
                  break;
               case 769:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(769, 771); }
                  break;
               case 772:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1793, 1795); }
                  break;
               case 774:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(775); }
                  break;
               case 775:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(775, 776); }
                  break;
               case 777:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1796, 1798); }
                  break;
               case 779:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(780); }
                  break;
               case 780:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(780, 781); }
                  break;
               case 782:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1799, 1801); }
                  break;
               case 784:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(785); }
                  break;
               case 785:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(785, 787); }
                  break;
               case 788:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1802, 1804); }
                  break;
               case 790:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(791); }
                  break;
               case 791:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(791, 793); }
                  break;
               case 794:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1805, 1807); }
                  break;
               case 796:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(797); }
                  break;
               case 797:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(797, 799); }
                  break;
               case 800:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1808, 1810); }
                  break;
               case 802:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(803); }
                  break;
               case 803:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(803, 805); }
                  break;
               case 806:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1811, 1813); }
                  break;
               case 808:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(809); }
                  break;
               case 809:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(809, 811); }
                  break;
               case 812:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1814, 1819); }
                  break;
               case 814:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(815); }
                  break;
               case 815:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1820, 1824); }
                  break;
               case 829:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1825, 1827); }
                  break;
               case 831:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(832); }
                  break;
               case 832:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(832, 834); }
                  break;
               case 835:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1828, 1830); }
                  break;
               case 837:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(838); }
                  break;
               case 838:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(838, 840); }
                  break;
               case 841:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1831, 1834); }
                  break;
               case 843:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(844); }
                  break;
               case 844:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1835, 1837); }
                  break;
               case 848:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1838, 1841); }
                  break;
               case 850:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(851); }
                  break;
               case 851:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1842, 1844); }
                  break;
               case 856:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1845, 1848); }
                  break;
               case 858:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(859); }
                  break;
               case 859:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1849, 1851); }
                  break;
               case 870:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1852, 1854); }
                  break;
               case 872:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(873); }
                  break;
               case 873:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(873, 874); }
                  break;
               case 875:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1855, 1858); }
                  break;
               case 877:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(878); }
                  break;
               case 878:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1859, 1861); }
                  break;
               case 880:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 881:
                  if (curChar == 57 && kind > 72)
                     kind = 72;
                  break;
               case 884:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 885:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1865, 1870); }
                  break;
               case 886:
                  if (curChar == 10)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 887:
               case 896:
                  if (curChar == 13)
                     { jjCheckNAdd(886); }
                  break;
               case 888:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 889:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1871, 1879); }
                  break;
               case 890:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1880, 1884); }
                  break;
               case 891:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1885, 1890); }
                  break;
               case 892:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1891, 1897); }
                  break;
               case 893:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1898, 1905); }
                  break;
               case 895:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1906, 1911); }
                  break;
               case 897:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1912, 1920); }
                  break;
               case 898:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1921, 1925); }
                  break;
               case 899:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1926, 1931); }
                  break;
               case 900:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1932, 1938); }
                  break;
               case 901:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1939, 1946); }
                  break;
               case 902:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1947, 1950); }
                  break;
               case 904:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(905); }
                  break;
               case 905:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1951, 1953); }
                  break;
               case 907:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 909:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 910:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1954, 1958); }
                  break;
               case 911:
                  if (curChar != 10)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 912:
               case 921:
                  if (curChar == 13)
                     { jjCheckNAdd(911); }
                  break;
               case 913:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 914:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1959, 1966); }
                  break;
               case 915:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1967, 1970); }
                  break;
               case 916:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1971, 1975); }
                  break;
               case 917:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1976, 1981); }
                  break;
               case 918:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1982, 1988); }
                  break;
               case 920:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1989, 1993); }
                  break;
               case 922:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1994, 2001); }
                  break;
               case 923:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2002, 2005); }
                  break;
               case 924:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2006, 2010); }
                  break;
               case 925:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2011, 2016); }
                  break;
               case 926:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2017, 2023); }
                  break;
               case 927:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2024, 2026); }
                  break;
               case 929:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(930); }
                  break;
               case 930:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(930, 931); }
                  break;
               case 931:
                  if (curChar == 37 && kind > 74)
                     kind = 74;
                  break;
               case 932:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddTwoStates(932, 933); }
                  break;
               case 934:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(935); }
                  break;
               case 935:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAdd(935); }
                  break;
               case 936:
                  if (curChar == 33)
                     { jjCheckNAddStates(200, 203); }
                  break;
               case 937:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(2027, 2029); }
                  break;
               case 938:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(939, 940); }
                  break;
               case 939:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(939, 940); }
                  break;
               case 940:
                  if (curChar == 42)
                     { jjCheckNAddStates(2030, 2032); }
                  break;
               case 941:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(942, 943); }
                  break;
               case 942:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(942, 943); }
                  break;
               case 943:
                  if (curChar == 42)
                     { jjCheckNAddStates(2033, 2035); }
                  break;
               case 944:
                  if (curChar == 47)
                     { jjCheckNAddStates(2027, 2029); }
                  break;
               case 945:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 938;
                  break;
               case 955:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(2036, 2038); }
                  break;
               case 956:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(957, 958); }
                  break;
               case 957:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(957, 958); }
                  break;
               case 958:
                  if (curChar == 42)
                     { jjCheckNAddStates(2039, 2041); }
                  break;
               case 959:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(960, 961); }
                  break;
               case 960:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(960, 961); }
                  break;
               case 961:
                  if (curChar == 42)
                     { jjCheckNAddStates(2042, 2044); }
                  break;
               case 962:
                  if (curChar == 47)
                     { jjCheckNAddStates(2036, 2038); }
                  break;
               case 963:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 956;
                  break;
               case 965:
                  if ((0x280000000000000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 974:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddStates(0, 173); }
                  break;
               case 975:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2045, 2048); }
                  break;
               case 976:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(976, 977); }
                  break;
               case 977:
                  if (curChar == 46)
                     { jjCheckNAdd(678); }
                  break;
               case 978:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2049, 2052); }
                  break;
               case 979:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(979, 980); }
                  break;
               case 980:
                  if (curChar == 46)
                     { jjCheckNAdd(685); }
                  break;
               case 981:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2053, 2056); }
                  break;
               case 982:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(982, 983); }
                  break;
               case 983:
                  if (curChar == 46)
                     { jjCheckNAdd(692); }
                  break;
               case 984:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2057, 2060); }
                  break;
               case 985:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(985, 986); }
                  break;
               case 986:
                  if (curChar == 46)
                     { jjCheckNAdd(700); }
                  break;
               case 987:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2061, 2064); }
                  break;
               case 988:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(988, 989); }
                  break;
               case 989:
                  if (curChar == 46)
                     { jjCheckNAdd(707); }
                  break;
               case 990:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2065, 2068); }
                  break;
               case 991:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(991, 992); }
                  break;
               case 992:
                  if (curChar == 46)
                     { jjCheckNAdd(714); }
                  break;
               case 993:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2069, 2072); }
                  break;
               case 994:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(994, 995); }
                  break;
               case 995:
                  if (curChar == 46)
                     { jjCheckNAdd(720); }
                  break;
               case 996:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2073, 2076); }
                  break;
               case 997:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(997, 998); }
                  break;
               case 998:
                  if (curChar == 46)
                     { jjCheckNAdd(727); }
                  break;
               case 999:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2077, 2080); }
                  break;
               case 1000:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1000, 1001); }
                  break;
               case 1001:
                  if (curChar == 46)
                     { jjCheckNAdd(734); }
                  break;
               case 1002:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2081, 2084); }
                  break;
               case 1003:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1003, 1004); }
                  break;
               case 1004:
                  if (curChar == 46)
                     { jjCheckNAdd(741); }
                  break;
               case 1005:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2085, 2088); }
                  break;
               case 1006:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1006, 1007); }
                  break;
               case 1007:
                  if (curChar == 46)
                     { jjCheckNAdd(748); }
                  break;
               case 1008:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2089, 2092); }
                  break;
               case 1009:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1009, 1010); }
                  break;
               case 1010:
                  if (curChar == 46)
                     { jjCheckNAdd(757); }
                  break;
               case 1011:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2093, 2095); }
                  break;
               case 1012:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1012, 1013); }
                  break;
               case 1013:
                  if (curChar == 46)
                     { jjCheckNAdd(766); }
                  break;
               case 1014:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2096, 2098); }
                  break;
               case 1015:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1015, 1016); }
                  break;
               case 1016:
                  if (curChar == 46)
                     { jjCheckNAdd(772); }
                  break;
               case 1017:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2099, 2101); }
                  break;
               case 1018:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1018, 1019); }
                  break;
               case 1019:
                  if (curChar == 46)
                     { jjCheckNAdd(777); }
                  break;
               case 1020:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2102, 2104); }
                  break;
               case 1021:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1021, 1022); }
                  break;
               case 1022:
                  if (curChar == 46)
                     { jjCheckNAdd(782); }
                  break;
               case 1023:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2105, 2107); }
                  break;
               case 1024:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1024, 1025); }
                  break;
               case 1025:
                  if (curChar == 46)
                     { jjCheckNAdd(788); }
                  break;
               case 1026:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2108, 2110); }
                  break;
               case 1027:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1027, 1028); }
                  break;
               case 1028:
                  if (curChar == 46)
                     { jjCheckNAdd(794); }
                  break;
               case 1029:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2111, 2113); }
                  break;
               case 1030:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1030, 1031); }
                  break;
               case 1031:
                  if (curChar == 46)
                     { jjCheckNAdd(800); }
                  break;
               case 1032:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2114, 2116); }
                  break;
               case 1033:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1033, 1034); }
                  break;
               case 1034:
                  if (curChar == 46)
                     { jjCheckNAdd(806); }
                  break;
               case 1035:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2117, 2122); }
                  break;
               case 1036:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1036, 1037); }
                  break;
               case 1037:
                  if (curChar == 46)
                     { jjCheckNAdd(812); }
                  break;
               case 1038:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2123, 2125); }
                  break;
               case 1039:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1039, 1040); }
                  break;
               case 1040:
                  if (curChar == 46)
                     { jjCheckNAdd(829); }
                  break;
               case 1041:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2126, 2128); }
                  break;
               case 1042:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1042, 1043); }
                  break;
               case 1043:
                  if (curChar == 46)
                     { jjCheckNAdd(835); }
                  break;
               case 1044:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2129, 2132); }
                  break;
               case 1045:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1045, 1046); }
                  break;
               case 1046:
                  if (curChar == 46)
                     { jjCheckNAdd(841); }
                  break;
               case 1047:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2133, 2136); }
                  break;
               case 1048:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1048, 1049); }
                  break;
               case 1049:
                  if (curChar == 46)
                     { jjCheckNAdd(848); }
                  break;
               case 1050:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2137, 2140); }
                  break;
               case 1051:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1051, 1052); }
                  break;
               case 1052:
                  if (curChar == 46)
                     { jjCheckNAdd(856); }
                  break;
               case 1053:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2141, 2143); }
                  break;
               case 1054:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1054, 1055); }
                  break;
               case 1055:
                  if (curChar == 46)
                     { jjCheckNAdd(870); }
                  break;
               case 1056:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2144, 2147); }
                  break;
               case 1057:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1057, 1058); }
                  break;
               case 1058:
                  if (curChar == 46)
                     { jjCheckNAdd(875); }
                  break;
               case 1059:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2148, 2151); }
                  break;
               case 1060:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1060, 1061); }
                  break;
               case 1061:
                  if (curChar == 46)
                     { jjCheckNAdd(902); }
                  break;
               case 1062:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2152, 2154); }
                  break;
               case 1063:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1063, 1064); }
                  break;
               case 1064:
                  if (curChar == 46)
                     { jjCheckNAdd(927); }
                  break;
               case 1065:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  { jjCheckNAddTwoStates(1065, 933); }
                  break;
               case 1066:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1066, 1067); }
                  break;
               case 1067:
                  if (curChar == 46)
                     { jjCheckNAdd(932); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAddStates(2155, 2159); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(2160, 2163); }
                  else if (curChar == 126)
                  {
                     if (kind > 33)
                        kind = 33;
                     { jjCheckNAdd(336); }
                  }
                  else if (curChar == 64)
                     { jjAddStates(2164, 2166); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 123)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(2167, 2168); }
                  else if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2169, 2171); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(2172, 2173); }
                  else if ((0x200000002L & l) != 0L)
                     { jjAddStates(2174, 2176); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(2177, 2179); }
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 1:
                  { jjAddStates(2180, 2181); }
                  break;
               case 3:
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 8:
                  if (curChar == 123 && kind > 27)
                     kind = 27;
                  break;
               case 14:
                  if (curChar == 124 && kind > 34)
                     kind = 34;
                  break;
               case 15:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 64)
                     { jjAddStates(2164, 2166); }
                  break;
               case 55:
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 58:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 59:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(272, 276); }
                  break;
               case 63:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(277, 284); }
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(285, 288); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(289, 293); }
                  break;
               case 66:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(294, 299); }
                  break;
               case 67:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(300, 306); }
                  break;
               case 68:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(58, 69); }
                  break;
               case 69:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(307, 311); }
                  break;
               case 71:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(312, 319); }
                  break;
               case 72:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(320, 323); }
                  break;
               case 73:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(324, 328); }
                  break;
               case 74:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(329, 334); }
                  break;
               case 75:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddStates(335, 341); }
                  break;
               case 77:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(76); }
                  break;
               case 78:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
               case 272:
               case 277:
               case 281:
               case 287:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 84:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x8000000080L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 87:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2182, 2185); }
                  break;
               case 96:
                  { jjAddStates(2186, 2187); }
                  break;
               case 98:
               case 99:
                  { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 104:
               case 105:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(353, 358); }
                  break;
               case 108:
                  { jjAddStates(2188, 2189); }
                  break;
               case 110:
               case 111:
                  { jjCheckNAddTwoStates(111, 112); }
                  break;
               case 116:
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 120:
               case 121:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(379, 384); }
                  break;
               case 124:
                  { jjAddStates(2190, 2191); }
                  break;
               case 126:
               case 127:
                  { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 132:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(133, 144); }
                  break;
               case 133:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 134:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(133, 135); }
                  break;
               case 135:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(397, 402); }
                  break;
               case 139:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(403, 411); }
                  break;
               case 140:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(412, 416); }
                  break;
               case 141:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(417, 422); }
                  break;
               case 142:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(423, 429); }
                  break;
               case 143:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(430, 437); }
                  break;
               case 144:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(438, 443); }
                  break;
               case 146:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(444, 452); }
                  break;
               case 147:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(453, 457); }
                  break;
               case 148:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(458, 463); }
                  break;
               case 149:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(464, 470); }
                  break;
               case 150:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(471, 478); }
                  break;
               case 151:
                  if (curChar == 92)
                     { jjCheckNAddStates(2192, 2195); }
                  break;
               case 152:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(379, 384); }
                  break;
               case 153:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(479, 486); }
                  break;
               case 157:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(496, 506); }
                  break;
               case 158:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(507, 513); }
                  break;
               case 159:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(514, 521); }
                  break;
               case 160:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(522, 530); }
                  break;
               case 161:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(531, 540); }
                  break;
               case 162:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(152, 163); }
                  break;
               case 163:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(541, 548); }
                  break;
               case 165:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(549, 559); }
                  break;
               case 166:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(560, 566); }
                  break;
               case 167:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(567, 574); }
                  break;
               case 168:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(575, 583); }
                  break;
               case 169:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(584, 593); }
                  break;
               case 171:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 173:
                  if (curChar == 92)
                     { jjAddStates(2196, 2199); }
                  break;
               case 177:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 178:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(602, 607); }
                  break;
               case 181:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(608, 616); }
                  break;
               case 182:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(617, 621); }
                  break;
               case 183:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(622, 627); }
                  break;
               case 184:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(628, 634); }
                  break;
               case 185:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(635, 642); }
                  break;
               case 187:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 189:
                  if (curChar == 92)
                     { jjAddStates(2200, 2203); }
                  break;
               case 193:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 194:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(646, 651); }
                  break;
               case 197:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(652, 660); }
                  break;
               case 198:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(661, 665); }
                  break;
               case 199:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(666, 671); }
                  break;
               case 200:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(672, 678); }
                  break;
               case 201:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(679, 686); }
                  break;
               case 202:
                  if (curChar == 92)
                     { jjCheckNAddStates(2204, 2207); }
                  break;
               case 203:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(353, 358); }
                  break;
               case 204:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(687, 694); }
                  break;
               case 208:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(704, 714); }
                  break;
               case 209:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(715, 721); }
                  break;
               case 210:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(722, 729); }
                  break;
               case 211:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(730, 738); }
                  break;
               case 212:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(739, 748); }
                  break;
               case 213:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(203, 214); }
                  break;
               case 214:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(749, 756); }
                  break;
               case 216:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(757, 767); }
                  break;
               case 217:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(768, 774); }
                  break;
               case 218:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(775, 782); }
                  break;
               case 219:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(783, 791); }
                  break;
               case 220:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(792, 801); }
                  break;
               case 221:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 222:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 225:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 231:
                  { jjAddStates(2208, 2209); }
                  break;
               case 233:
               case 234:
                  { jjCheckNAddTwoStates(234, 235); }
                  break;
               case 239:
               case 240:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(817, 820); }
                  break;
               case 243:
                  { jjAddStates(2210, 2211); }
                  break;
               case 245:
               case 246:
                  { jjCheckNAddTwoStates(246, 247); }
                  break;
               case 251:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(252, 253); }
                  break;
               case 252:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(817, 820); }
                  break;
               case 253:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(830, 835); }
                  break;
               case 257:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(842, 850); }
                  break;
               case 258:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(851, 855); }
                  break;
               case 259:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(856, 861); }
                  break;
               case 260:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(862, 868); }
                  break;
               case 261:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(869, 876); }
                  break;
               case 262:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(252, 263); }
                  break;
               case 263:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(877, 882); }
                  break;
               case 265:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(883, 891); }
                  break;
               case 266:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(892, 896); }
                  break;
               case 267:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(897, 902); }
                  break;
               case 268:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(903, 909); }
                  break;
               case 269:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(910, 917); }
                  break;
               case 271:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(2177, 2179); }
                  break;
               case 273:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 275:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 278:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x200000002L & l) != 0L)
                     { jjAddStates(2174, 2176); }
                  break;
               case 282:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
               case 971:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(82); }
                  break;
               case 285:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 288:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(2172, 2173); }
                  break;
               case 291:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(76); }
                  break;
               case 292:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(76); }
                  break;
               case 294:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 297:
               case 305:
               case 968:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(296); }
                  break;
               case 298:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 300:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 302:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 303:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 304:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 306:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 307:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 310:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 313:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 313;
                  break;
               case 315:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 318:
                  { jjAddStates(2212, 2213); }
                  break;
               case 320:
               case 321:
                  { jjCheckNAddTwoStates(321, 322); }
                  break;
               case 327:
                  { jjAddStates(2214, 2215); }
                  break;
               case 329:
               case 330:
                  { jjCheckNAddTwoStates(330, 331); }
                  break;
               case 335:
                  if (curChar == 126)
                     { jjCheckNAdd(336); }
                  break;
               case 338:
                  { jjAddStates(2216, 2217); }
                  break;
               case 340:
               case 341:
                  { jjCheckNAddTwoStates(341, 342); }
                  break;
               case 347:
                  { jjAddStates(2218, 2219); }
                  break;
               case 349:
               case 350:
                  { jjCheckNAddTwoStates(350, 351); }
                  break;
               case 356:
                  { jjAddStates(2220, 2221); }
                  break;
               case 358:
               case 359:
                  { jjCheckNAddTwoStates(359, 360); }
                  break;
               case 365:
                  { jjAddStates(2222, 2223); }
                  break;
               case 367:
               case 368:
                  { jjCheckNAddTwoStates(368, 369); }
                  break;
               case 374:
                  { jjAddStates(2224, 2225); }
                  break;
               case 376:
               case 377:
                  { jjCheckNAddTwoStates(377, 378); }
                  break;
               case 383:
                  { jjAddStates(2226, 2227); }
                  break;
               case 385:
               case 386:
                  { jjCheckNAddTwoStates(386, 387); }
                  break;
               case 391:
                  if (curChar == 126 && kind > 33)
                     kind = 33;
                  break;
               case 393:
                  { jjAddStates(2228, 2229); }
                  break;
               case 395:
               case 396:
                  { jjCheckNAddTwoStates(396, 397); }
                  break;
               case 401:
                  if (curChar != 126)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(336); }
                  break;
               case 403:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 405:
                  if (curChar == 92)
                     { jjAddStates(2230, 2233); }
                  break;
               case 409:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 410:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(999, 1004); }
                  break;
               case 413:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1005, 1013); }
                  break;
               case 414:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1014, 1018); }
                  break;
               case 415:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1019, 1024); }
                  break;
               case 416:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1025, 1031); }
                  break;
               case 417:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1032, 1039); }
                  break;
               case 418:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 419:
                  if (curChar == 92)
                     { jjAddStates(2234, 2237); }
                  break;
               case 423:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 424:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1040, 1044); }
                  break;
               case 427:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1045, 1052); }
                  break;
               case 428:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1053, 1056); }
                  break;
               case 429:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1057, 1061); }
                  break;
               case 430:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1062, 1067); }
                  break;
               case 431:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1068, 1074); }
                  break;
               case 433:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 435:
                  if (curChar == 92)
                     { jjAddStates(2238, 2241); }
                  break;
               case 439:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 440:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1078, 1083); }
                  break;
               case 443:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1084, 1092); }
                  break;
               case 444:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1093, 1097); }
                  break;
               case 445:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1098, 1103); }
                  break;
               case 446:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1104, 1110); }
                  break;
               case 447:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1111, 1118); }
                  break;
               case 448:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 449:
                  if (curChar == 92)
                     { jjAddStates(2242, 2245); }
                  break;
               case 453:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 454:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1119, 1123); }
                  break;
               case 457:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1124, 1131); }
                  break;
               case 458:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1132, 1135); }
                  break;
               case 459:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1136, 1140); }
                  break;
               case 460:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1141, 1146); }
                  break;
               case 461:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddStates(1147, 1153); }
                  break;
               case 463:
               case 464:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 465:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(466, 467); }
                  break;
               case 466:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 467:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1154, 1158); }
                  break;
               case 471:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1159, 1166); }
                  break;
               case 472:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1167, 1170); }
                  break;
               case 473:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1171, 1175); }
                  break;
               case 474:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1176, 1181); }
                  break;
               case 475:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1182, 1188); }
                  break;
               case 477:
               case 478:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 479:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(480, 481); }
                  break;
               case 480:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 481:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1191, 1195); }
                  break;
               case 485:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1196, 1203); }
                  break;
               case 486:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1204, 1207); }
                  break;
               case 487:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1208, 1212); }
                  break;
               case 488:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1213, 1218); }
                  break;
               case 489:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1219, 1225); }
                  break;
               case 490:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(480, 491); }
                  break;
               case 491:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1226, 1230); }
                  break;
               case 493:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1231, 1238); }
                  break;
               case 494:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1239, 1242); }
                  break;
               case 495:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1243, 1247); }
                  break;
               case 496:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1248, 1253); }
                  break;
               case 497:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1254, 1260); }
                  break;
               case 498:
               case 499:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 501:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(502, 503); }
                  break;
               case 502:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 503:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1264, 1269); }
                  break;
               case 507:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1270, 1278); }
                  break;
               case 508:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1279, 1283); }
                  break;
               case 509:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1284, 1289); }
                  break;
               case 510:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1290, 1296); }
                  break;
               case 511:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1297, 1304); }
                  break;
               case 512:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(502, 513); }
                  break;
               case 513:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1305, 1310); }
                  break;
               case 515:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1311, 1319); }
                  break;
               case 516:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1320, 1324); }
                  break;
               case 517:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1325, 1330); }
                  break;
               case 518:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1331, 1337); }
                  break;
               case 519:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1338, 1345); }
                  break;
               case 520:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(466, 521); }
                  break;
               case 521:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1346, 1350); }
                  break;
               case 523:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1351, 1358); }
                  break;
               case 524:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1359, 1362); }
                  break;
               case 525:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1363, 1367); }
                  break;
               case 526:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1368, 1373); }
                  break;
               case 527:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(1374, 1380); }
                  break;
               case 528:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(2155, 2159); }
                  break;
               case 531:
               case 532:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 533:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(534, 535); }
                  break;
               case 534:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 535:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1381, 1385); }
                  break;
               case 539:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1386, 1393); }
                  break;
               case 540:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1394, 1397); }
                  break;
               case 541:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1398, 1402); }
                  break;
               case 542:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1403, 1408); }
                  break;
               case 543:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1409, 1415); }
                  break;
               case 544:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(534, 545); }
                  break;
               case 545:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1416, 1420); }
                  break;
               case 547:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1421, 1428); }
                  break;
               case 548:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1429, 1432); }
                  break;
               case 549:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1433, 1437); }
                  break;
               case 550:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1438, 1443); }
                  break;
               case 551:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddStates(1444, 1450); }
                  break;
               case 552:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 553:
                  if (curChar == 92)
                     { jjAddStates(2246, 2247); }
                  break;
               case 554:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 555:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1451, 1455); }
                  break;
               case 559:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1456, 1463); }
                  break;
               case 560:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1464, 1467); }
                  break;
               case 561:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1468, 1472); }
                  break;
               case 562:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1473, 1478); }
                  break;
               case 563:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddStates(1479, 1485); }
                  break;
               case 564:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2169, 2171); }
                  break;
               case 567:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 571:
                  { jjAddStates(2248, 2249); }
                  break;
               case 573:
               case 574:
                  { jjCheckNAddTwoStates(574, 575); }
                  break;
               case 579:
                  if (curChar == 92)
                     { jjAddStates(2250, 2253); }
                  break;
               case 583:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 584:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1504, 1509); }
                  break;
               case 587:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1510, 1518); }
                  break;
               case 588:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1519, 1523); }
                  break;
               case 589:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1524, 1529); }
                  break;
               case 590:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1530, 1536); }
                  break;
               case 591:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1537, 1544); }
                  break;
               case 593:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 595:
                  if (curChar == 92)
                     { jjAddStates(2254, 2257); }
                  break;
               case 599:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 600:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1548, 1553); }
                  break;
               case 603:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1554, 1562); }
                  break;
               case 604:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1563, 1567); }
                  break;
               case 605:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1568, 1573); }
                  break;
               case 606:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1574, 1580); }
                  break;
               case 607:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1581, 1588); }
                  break;
               case 608:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 609:
                  if (curChar == 92)
                     { jjAddStates(2258, 2259); }
                  break;
               case 610:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 611:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1593, 1598); }
                  break;
               case 615:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1605, 1613); }
                  break;
               case 616:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1614, 1618); }
                  break;
               case 617:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1619, 1624); }
                  break;
               case 618:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1625, 1631); }
                  break;
               case 619:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1632, 1639); }
                  break;
               case 622:
                  { jjAddStates(2260, 2261); }
                  break;
               case 624:
               case 625:
                  { jjCheckNAddTwoStates(625, 626); }
                  break;
               case 629:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 565;
                  break;
               case 630:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 629;
                  break;
               case 638:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjAddStates(1671, 1676); }
                  break;
               case 639:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 640;
                  break;
               case 640:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 641;
                  break;
               case 641:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 642;
                  break;
               case 642:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(643); }
                  break;
               case 643:
                  if ((0x7e0000007eL & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 644:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 645;
                  break;
               case 645:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 646;
                  break;
               case 646:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 647;
                  break;
               case 647:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 634;
                  break;
               case 648:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 649;
                  break;
               case 649:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 650;
                  break;
               case 650:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 651;
                  break;
               case 652:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 653;
                  break;
               case 653:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 654;
                  break;
               case 656:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 657;
                  break;
               case 665:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(666, 672); }
                  break;
               case 667:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 668;
                  break;
               case 668:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1687, 1690); }
                  break;
               case 669:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(643); }
                  break;
               case 670:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(643, 669); }
                  break;
               case 671:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddStates(1691, 1693); }
                  break;
               case 672:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1694, 1698); }
                  break;
               case 673:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(666); }
                  break;
               case 674:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(673, 666); }
                  break;
               case 675:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1699, 1701); }
                  break;
               case 676:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1702, 1705); }
                  break;
               case 679:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2262, 2263); }
                  break;
               case 682:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 684;
                  break;
               case 683:
                  if ((0x200000002000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 684:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 683;
                  break;
               case 686:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2264, 2265); }
                  break;
               case 689:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 691;
                  break;
               case 690:
                  if ((0x100000001000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 691:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 690;
                  break;
               case 693:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2266, 2267); }
                  break;
               case 696:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 699;
                  break;
               case 697:
                  if ((0x1000000010000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 698:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 697;
                  break;
               case 699:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 698;
                  break;
               case 701:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2268, 2269); }
                  break;
               case 704:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 706;
                  break;
               case 705:
                  if ((0x10000000100L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 706:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(705); }
                  break;
               case 708:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2270, 2271); }
                  break;
               case 711:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 713;
                  break;
               case 712:
                  if ((0x800000008L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 713:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 712;
                  break;
               case 715:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2272, 2273); }
                  break;
               case 718:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 719;
                  break;
               case 719:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(705); }
                  break;
               case 721:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2274, 2275); }
                  break;
               case 724:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 726;
                  break;
               case 725:
                  if ((0x80000000800000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 726:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 725;
                  break;
               case 728:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2276, 2277); }
                  break;
               case 731:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 733;
                  break;
               case 732:
                  if ((0x10000000100L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 733:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 732;
                  break;
               case 735:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2278, 2279); }
                  break;
               case 738:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 740;
                  break;
               case 739:
                  if ((0x20000000200L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 740:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 739;
                  break;
               case 742:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2280, 2281); }
                  break;
               case 745:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 747;
                  break;
               case 746:
                  if ((0x400000004L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 747:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 746;
                  break;
               case 749:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2282, 2283); }
                  break;
               case 752:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 756;
                  break;
               case 753:
                  if ((0x400000004000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 754:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 753;
                  break;
               case 755:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 754;
                  break;
               case 756:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 755;
                  break;
               case 758:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2284, 2285); }
                  break;
               case 761:
                  if ((0x8101000081010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 765;
                  break;
               case 762:
                  if ((0x100000001000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 763:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 762;
                  break;
               case 764:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 763;
                  break;
               case 765:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 764;
                  break;
               case 767:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2286, 2287); }
                  break;
               case 770:
                  if ((0x200000002000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 771:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(770); }
                  break;
               case 773:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2288, 2289); }
                  break;
               case 776:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(770); }
                  break;
               case 778:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2290, 2291); }
                  break;
               case 781:
                  if ((0x2000000020000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 783:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2292, 2293); }
                  break;
               case 786:
                  if ((0x400000004000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 787:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 786;
                  break;
               case 789:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2294, 2295); }
                  break;
               case 792:
                  if ((0x10000000100000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 793:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 792;
                  break;
               case 795:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2296, 2297); }
                  break;
               case 798:
                  if ((0x800000008L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 799:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 798;
                  break;
               case 801:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2298, 2299); }
                  break;
               case 804:
                  if ((0x100000001000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 805:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 804;
                  break;
               case 807:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2300, 2301); }
                  break;
               case 810:
                  if ((0x4000000040000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 811:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 810;
                  break;
               case 813:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2302, 2303); }
                  break;
               case 816:
                  if ((0x8000000080L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 817:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 816;
                  break;
               case 818:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 817;
                  break;
               case 819:
                  if ((0x1000000010L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 820:
               case 823:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(819); }
                  break;
               case 821:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 820;
                  break;
               case 822:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 821;
                  break;
               case 824:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 823;
                  break;
               case 825:
                  if ((0x400000004000L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 826:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 825;
                  break;
               case 827:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 826;
                  break;
               case 828:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 827;
                  break;
               case 830:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2304, 2305); }
                  break;
               case 833:
                  if ((0x400000004L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 834:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 833;
                  break;
               case 836:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2306, 2307); }
                  break;
               case 839:
                  if ((0x10000000100000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 840:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 839;
                  break;
               case 842:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2308, 2309); }
                  break;
               case 845:
               case 847:
                  if ((0x8000000080000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 846:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 845;
                  break;
               case 849:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2310, 2311); }
                  break;
               case 852:
                  if ((0x400000004000000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 853:
               case 854:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(852); }
                  break;
               case 855:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 854;
                  break;
               case 857:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2312, 2313); }
                  break;
               case 860:
               case 867:
                  if ((0x100000001000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 861:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(2314, 2316); }
                  break;
               case 862:
                  if ((0x20000000200L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 863:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 862;
                  break;
               case 864:
                  if ((0x200000002000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 865:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 864;
                  break;
               case 866:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 865;
                  break;
               case 868:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 867;
                  break;
               case 869:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 868;
                  break;
               case 871:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2317, 2318); }
                  break;
               case 874:
                  if ((0x400000004000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 876:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2319, 2320); }
                  break;
               case 879:
               case 880:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 882:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 881;
                  break;
               case 883:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(884, 885); }
                  break;
               case 884:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 885:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1865, 1870); }
                  break;
               case 889:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1871, 1879); }
                  break;
               case 890:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1880, 1884); }
                  break;
               case 891:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1885, 1890); }
                  break;
               case 892:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1891, 1897); }
                  break;
               case 893:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1898, 1905); }
                  break;
               case 894:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(884, 895); }
                  break;
               case 895:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1906, 1911); }
                  break;
               case 897:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1912, 1920); }
                  break;
               case 898:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1921, 1925); }
                  break;
               case 899:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1926, 1931); }
                  break;
               case 900:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1932, 1938); }
                  break;
               case 901:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1939, 1946); }
                  break;
               case 903:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2321, 2322); }
                  break;
               case 906:
               case 907:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 908:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(909, 910); }
                  break;
               case 909:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 910:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1954, 1958); }
                  break;
               case 914:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1959, 1966); }
                  break;
               case 915:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1967, 1970); }
                  break;
               case 916:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1971, 1975); }
                  break;
               case 917:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1976, 1981); }
                  break;
               case 918:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1982, 1988); }
                  break;
               case 919:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(909, 920); }
                  break;
               case 920:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1989, 1993); }
                  break;
               case 922:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(1994, 2001); }
                  break;
               case 923:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2002, 2005); }
                  break;
               case 924:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2006, 2010); }
                  break;
               case 925:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2011, 2016); }
                  break;
               case 926:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddStates(2017, 2023); }
                  break;
               case 928:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2323, 2324); }
                  break;
               case 933:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2325, 2326); }
                  break;
               case 939:
                  { jjAddStates(2327, 2328); }
                  break;
               case 941:
               case 942:
                  { jjCheckNAddTwoStates(942, 943); }
                  break;
               case 946:
                  if ((0x10000000100000L & l) != 0L && kind > 76)
                     kind = 76;
                  break;
               case 947:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 946;
                  break;
               case 948:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 947;
                  break;
               case 949:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 948;
                  break;
               case 950:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 949;
                  break;
               case 951:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 950;
                  break;
               case 952:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 951;
                  break;
               case 953:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 952;
                  break;
               case 954:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 953;
                  break;
               case 957:
                  { jjAddStates(2329, 2330); }
                  break;
               case 959:
               case 960:
                  { jjCheckNAddTwoStates(960, 961); }
                  break;
               case 964:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 965;
                  break;
               case 966:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 964;
                  break;
               case 967:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(2167, 2168); }
                  break;
               case 969:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 968;
                  break;
               case 970:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 969;
                  break;
               case 972:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 971;
                  break;
               case 973:
                  if (curChar == 92)
                     { jjCheckNAddStates(2160, 2163); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(2155, 2159); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2180, 2181); }
                  break;
               case 3:
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(268, 269); }
                  break;
               case 55:
               case 56:
               case 58:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 96:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2186, 2187); }
                  break;
               case 98:
               case 99:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 104:
               case 105:
               case 203:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(353, 358); }
                  break;
               case 108:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2188, 2189); }
                  break;
               case 110:
               case 111:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(111, 112); }
                  break;
               case 116:
               case 117:
               case 133:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 120:
               case 121:
               case 152:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(379, 384); }
                  break;
               case 124:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2190, 2191); }
                  break;
               case 126:
               case 127:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 171:
               case 177:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(594, 596); }
                  break;
               case 187:
               case 193:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(643, 645); }
                  break;
               case 231:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2208, 2209); }
                  break;
               case 233:
               case 234:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(234, 235); }
                  break;
               case 239:
               case 240:
               case 252:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(817, 820); }
                  break;
               case 243:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2210, 2211); }
                  break;
               case 245:
               case 246:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(246, 247); }
                  break;
               case 318:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2212, 2213); }
                  break;
               case 320:
               case 321:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(321, 322); }
                  break;
               case 327:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2214, 2215); }
                  break;
               case 329:
               case 330:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(330, 331); }
                  break;
               case 338:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2216, 2217); }
                  break;
               case 340:
               case 341:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(341, 342); }
                  break;
               case 347:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2218, 2219); }
                  break;
               case 349:
               case 350:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(350, 351); }
                  break;
               case 356:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2220, 2221); }
                  break;
               case 358:
               case 359:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(359, 360); }
                  break;
               case 365:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2222, 2223); }
                  break;
               case 367:
               case 368:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(368, 369); }
                  break;
               case 374:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2224, 2225); }
                  break;
               case 376:
               case 377:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(377, 378); }
                  break;
               case 383:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2226, 2227); }
                  break;
               case 385:
               case 386:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(386, 387); }
                  break;
               case 393:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2228, 2229); }
                  break;
               case 395:
               case 396:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(396, 397); }
                  break;
               case 403:
               case 409:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(996, 998); }
                  break;
               case 418:
               case 423:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 433:
               case 439:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1075, 1077); }
                  break;
               case 448:
               case 453:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAddTwoStates(448, 449); }
                  break;
               case 463:
               case 464:
               case 466:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddTwoStates(464, 465); }
                  break;
               case 477:
               case 478:
               case 480:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(478, 479); }
                  break;
               case 498:
               case 499:
               case 502:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1261, 1263); }
                  break;
               case 531:
               case 532:
               case 534:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 552:
               case 554:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 43)
                     kind = 43;
                  { jjCheckNAddTwoStates(552, 553); }
                  break;
               case 567:
               case 583:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1492, 1494); }
                  break;
               case 571:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2248, 2249); }
                  break;
               case 573:
               case 574:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(574, 575); }
                  break;
               case 593:
               case 599:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1545, 1547); }
                  break;
               case 608:
               case 610:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1589, 1592); }
                  break;
               case 622:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2260, 2261); }
                  break;
               case 624:
               case 625:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(625, 626); }
                  break;
               case 879:
               case 880:
               case 884:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1862, 1864); }
                  break;
               case 906:
               case 907:
               case 909:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAddTwoStates(907, 908); }
                  break;
               case 939:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2327, 2328); }
                  break;
               case 941:
               case 942:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(942, 943); }
                  break;
               case 957:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2329, 2330); }
                  break;
               case 959:
               case 960:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(960, 961); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1068 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   975, 976, 977, 679, 682, 684, 978, 979, 980, 686, 689, 691, 981, 982, 983, 693, 
   696, 699, 984, 985, 986, 701, 704, 706, 987, 988, 989, 708, 711, 713, 990, 991, 
   992, 715, 718, 719, 993, 994, 995, 721, 724, 726, 996, 997, 998, 728, 731, 733, 
   999, 1000, 1001, 735, 738, 740, 1002, 1003, 1004, 742, 745, 747, 1005, 1006, 1007, 749, 
   752, 756, 1008, 1009, 1010, 758, 761, 765, 1011, 1012, 1013, 767, 771, 1014, 1015, 1016, 
   773, 776, 1017, 1018, 1019, 778, 781, 1020, 1021, 1022, 783, 787, 1023, 1024, 1025, 789, 
   793, 1026, 1027, 1028, 795, 799, 1029, 1030, 1031, 801, 805, 1032, 1033, 1034, 807, 811, 
   1035, 1036, 1037, 813, 818, 822, 824, 828, 1038, 1039, 1040, 830, 834, 1041, 1042, 1043, 
   836, 840, 1044, 1045, 1046, 842, 846, 847, 1047, 1048, 1049, 849, 853, 855, 1050, 1051, 
   1052, 857, 860, 1053, 1054, 1055, 871, 874, 1056, 1057, 1058, 876, 879, 1059, 1060, 1061, 
   903, 906, 1062, 1063, 1064, 928, 931, 1065, 1066, 1067, 933, 919, 894, 861, 324, 325, 
   333, 334, 335, 344, 345, 8, 353, 354, 9, 362, 363, 10, 371, 372, 12, 380, 
   381, 13, 389, 390, 391, 399, 400, 15, 937, 954, 955, 966, 678, 685, 692, 700, 
   707, 714, 720, 727, 734, 741, 748, 757, 766, 772, 777, 782, 788, 794, 800, 806, 
   812, 829, 835, 841, 848, 856, 870, 875, 902, 927, 932, 530, 531, 552, 553, 544, 
   463, 476, 498, 512, 520, 433, 434, 448, 449, 435, 403, 404, 418, 419, 405, 304, 
   315, 227, 94, 103, 104, 213, 2, 3, 6, 3, 5, 6, 18, 19, 55, 68, 
   56, 61, 62, 57, 63, 56, 64, 61, 62, 57, 65, 66, 67, 56, 61, 62, 
   57, 56, 64, 61, 62, 57, 56, 64, 61, 62, 57, 65, 56, 64, 61, 62, 
   57, 65, 66, 70, 62, 56, 57, 71, 72, 70, 62, 56, 57, 73, 74, 75, 
   70, 62, 56, 57, 72, 70, 62, 56, 57, 72, 70, 62, 56, 57, 73, 72, 
   70, 62, 56, 57, 73, 74, 102, 103, 104, 213, 94, 97, 98, 101, 98, 100, 
   101, 105, 106, 115, 116, 131, 202, 114, 115, 116, 131, 132, 106, 109, 110, 113, 
   110, 112, 113, 117, 118, 134, 119, 120, 170, 186, 162, 115, 116, 121, 122, 131, 
   151, 115, 116, 130, 131, 132, 122, 125, 126, 129, 126, 128, 129, 117, 137, 138, 
   118, 134, 139, 117, 140, 137, 138, 118, 134, 141, 142, 143, 117, 137, 138, 118, 
   134, 117, 140, 137, 138, 118, 134, 117, 140, 137, 138, 118, 134, 141, 117, 140, 
   137, 138, 118, 134, 141, 142, 145, 138, 117, 118, 134, 146, 147, 145, 138, 117, 
   118, 134, 148, 149, 150, 145, 138, 117, 118, 134, 147, 145, 138, 117, 118, 134, 
   147, 145, 138, 117, 118, 134, 148, 147, 145, 138, 117, 118, 134, 148, 149, 115, 
   116, 121, 155, 131, 151, 156, 157, 115, 116, 121, 122, 130, 131, 132, 122, 151, 
   115, 116, 121, 158, 155, 131, 151, 156, 159, 160, 161, 115, 116, 121, 155, 131, 
   151, 156, 115, 116, 121, 158, 155, 131, 151, 156, 115, 116, 121, 158, 155, 131, 
   151, 156, 159, 115, 116, 121, 158, 155, 131, 151, 156, 159, 160, 115, 116, 164, 
   121, 131, 151, 156, 165, 115, 116, 166, 164, 121, 131, 151, 156, 167, 168, 169, 
   115, 116, 164, 121, 131, 151, 156, 115, 116, 166, 164, 121, 131, 151, 156, 115, 
   116, 166, 164, 121, 131, 151, 156, 167, 115, 116, 166, 164, 121, 131, 151, 156, 
   167, 168, 171, 172, 173, 115, 116, 122, 131, 132, 171, 179, 180, 172, 173, 181, 
   171, 182, 179, 180, 172, 173, 183, 184, 185, 171, 179, 180, 172, 173, 171, 182, 
   179, 180, 172, 173, 171, 182, 179, 180, 172, 173, 183, 171, 182, 179, 180, 172, 
   173, 183, 184, 187, 188, 189, 187, 195, 196, 188, 189, 197, 187, 198, 195, 196, 
   188, 189, 199, 200, 201, 187, 195, 196, 188, 189, 187, 198, 195, 196, 188, 189, 
   187, 198, 195, 196, 188, 189, 199, 187, 198, 195, 196, 188, 189, 199, 200, 105, 
   206, 115, 116, 131, 202, 207, 208, 105, 106, 114, 115, 116, 131, 132, 106, 202, 
   105, 209, 206, 115, 116, 131, 202, 207, 210, 211, 212, 105, 206, 115, 116, 131, 
   202, 207, 105, 209, 206, 115, 116, 131, 202, 207, 105, 209, 206, 115, 116, 131, 
   202, 207, 210, 105, 209, 206, 115, 116, 131, 202, 207, 210, 211, 215, 105, 115, 
   116, 131, 202, 207, 216, 217, 215, 105, 115, 116, 131, 202, 207, 218, 219, 220, 
   215, 105, 115, 116, 131, 202, 207, 217, 215, 105, 115, 116, 131, 202, 207, 217, 
   215, 105, 115, 116, 131, 202, 207, 218, 217, 215, 105, 115, 116, 131, 202, 207, 
   218, 219, 229, 238, 239, 262, 237, 238, 239, 262, 229, 232, 233, 236, 233, 235, 
   236, 240, 241, 250, 251, 249, 250, 241, 244, 245, 248, 245, 247, 248, 240, 255, 
   250, 251, 256, 257, 240, 241, 249, 250, 241, 251, 240, 258, 255, 250, 251, 256, 
   259, 260, 261, 240, 255, 250, 251, 256, 240, 258, 255, 250, 251, 256, 240, 258, 
   255, 250, 251, 256, 259, 240, 258, 255, 250, 251, 256, 259, 260, 264, 240, 250, 
   251, 256, 265, 266, 264, 240, 250, 251, 256, 267, 268, 269, 264, 240, 250, 251, 
   256, 266, 264, 240, 250, 251, 256, 266, 264, 240, 250, 251, 256, 267, 266, 264, 
   240, 250, 251, 256, 267, 268, 319, 320, 323, 320, 322, 323, 328, 329, 332, 329, 
   331, 332, 333, 334, 335, 339, 340, 343, 340, 342, 343, 344, 345, 8, 348, 349, 
   352, 349, 351, 352, 353, 354, 9, 357, 358, 361, 358, 360, 361, 362, 363, 10, 
   366, 367, 370, 367, 369, 370, 371, 372, 12, 375, 376, 379, 376, 378, 379, 380, 
   381, 13, 384, 385, 388, 385, 387, 388, 389, 390, 391, 394, 395, 398, 395, 397, 
   398, 399, 400, 15, 403, 404, 405, 403, 411, 412, 404, 405, 413, 403, 414, 411, 
   412, 404, 405, 415, 416, 417, 403, 411, 412, 404, 405, 403, 414, 411, 412, 404, 
   405, 403, 414, 411, 412, 404, 405, 415, 403, 414, 411, 412, 404, 405, 415, 416, 
   418, 425, 426, 419, 427, 418, 428, 425, 426, 419, 429, 430, 431, 418, 425, 426, 
   419, 418, 428, 425, 426, 419, 418, 428, 425, 426, 419, 429, 418, 428, 425, 426, 
   419, 429, 430, 433, 434, 435, 433, 441, 442, 434, 435, 443, 433, 444, 441, 442, 
   434, 435, 445, 446, 447, 433, 441, 442, 434, 435, 433, 444, 441, 442, 434, 435, 
   433, 444, 441, 442, 434, 435, 445, 433, 444, 441, 442, 434, 435, 445, 446, 448, 
   455, 456, 449, 457, 448, 458, 455, 456, 449, 459, 460, 461, 448, 455, 456, 449, 
   448, 458, 455, 456, 449, 448, 458, 455, 456, 449, 459, 448, 458, 455, 456, 449, 
   459, 460, 464, 469, 470, 465, 471, 464, 472, 469, 470, 465, 473, 474, 475, 464, 
   469, 470, 465, 464, 472, 469, 470, 465, 464, 472, 469, 470, 465, 473, 464, 472, 
   469, 470, 465, 473, 474, 477, 490, 478, 483, 484, 479, 485, 478, 486, 483, 484, 
   479, 487, 488, 489, 478, 483, 484, 479, 478, 486, 483, 484, 479, 478, 486, 483, 
   484, 479, 487, 478, 486, 483, 484, 479, 487, 488, 492, 484, 478, 479, 493, 494, 
   492, 484, 478, 479, 495, 496, 497, 492, 484, 478, 479, 494, 492, 484, 478, 479, 
   494, 492, 484, 478, 479, 495, 494, 492, 484, 478, 479, 495, 496, 499, 500, 501, 
   499, 505, 506, 500, 501, 507, 499, 508, 505, 506, 500, 501, 509, 510, 511, 499, 
   505, 506, 500, 501, 499, 508, 505, 506, 500, 501, 499, 508, 505, 506, 500, 501, 
   509, 499, 508, 505, 506, 500, 501, 509, 510, 514, 506, 499, 500, 501, 515, 516, 
   514, 506, 499, 500, 501, 517, 518, 519, 514, 506, 499, 500, 501, 516, 514, 506, 
   499, 500, 501, 516, 514, 506, 499, 500, 501, 517, 516, 514, 506, 499, 500, 501, 
   517, 518, 522, 470, 464, 465, 523, 524, 522, 470, 464, 465, 525, 526, 527, 522, 
   470, 464, 465, 524, 522, 470, 464, 465, 524, 522, 470, 464, 465, 525, 524, 522, 
   470, 464, 465, 525, 526, 532, 537, 538, 533, 539, 532, 540, 537, 538, 533, 541, 
   542, 543, 532, 537, 538, 533, 532, 540, 537, 538, 533, 532, 540, 537, 538, 533, 
   541, 532, 540, 537, 538, 533, 541, 542, 546, 538, 532, 533, 547, 548, 546, 538, 
   532, 533, 549, 550, 551, 546, 538, 532, 533, 548, 546, 538, 532, 533, 548, 546, 
   538, 532, 533, 549, 548, 546, 538, 532, 533, 549, 550, 552, 557, 558, 553, 559, 
   552, 560, 557, 558, 553, 561, 562, 563, 552, 557, 558, 553, 552, 560, 557, 558, 
   553, 552, 560, 557, 558, 553, 561, 552, 560, 557, 558, 553, 561, 562, 566, 592, 
   608, 578, 609, 620, 567, 568, 579, 577, 578, 569, 572, 573, 576, 573, 575, 576, 
   567, 585, 586, 568, 579, 587, 567, 588, 585, 586, 568, 579, 589, 590, 591, 567, 
   585, 586, 568, 579, 567, 588, 585, 586, 568, 579, 567, 588, 585, 586, 568, 579, 
   589, 567, 588, 585, 586, 568, 579, 589, 590, 593, 594, 595, 593, 601, 602, 594, 
   595, 603, 593, 604, 601, 602, 594, 595, 605, 606, 607, 593, 601, 602, 594, 595, 
   593, 604, 601, 602, 594, 595, 593, 604, 601, 602, 594, 595, 605, 593, 604, 601, 
   602, 594, 595, 605, 606, 608, 569, 578, 609, 608, 613, 578, 609, 614, 615, 608, 
   569, 577, 578, 569, 609, 608, 616, 613, 578, 609, 614, 617, 618, 619, 608, 613, 
   578, 609, 614, 608, 616, 613, 578, 609, 614, 608, 616, 613, 578, 609, 614, 617, 
   608, 616, 613, 578, 609, 614, 617, 618, 628, 566, 592, 608, 577, 578, 569, 609, 
   620, 623, 624, 627, 624, 626, 627, 628, 566, 592, 608, 578, 609, 620, 632, 638, 
   634, 635, 636, 637, 634, 635, 636, 639, 644, 648, 652, 656, 660, 634, 658, 659, 
   634, 661, 662, 663, 634, 661, 662, 643, 669, 670, 671, 643, 669, 670, 673, 666, 
   674, 675, 676, 673, 666, 674, 673, 666, 674, 675, 678, 679, 682, 684, 681, 682, 
   684, 685, 686, 689, 691, 688, 689, 691, 692, 693, 696, 699, 695, 696, 699, 700, 
   701, 704, 706, 703, 704, 706, 707, 708, 711, 713, 710, 711, 713, 714, 715, 718, 
   719, 717, 718, 719, 720, 721, 724, 726, 723, 724, 726, 727, 728, 731, 733, 730, 
   731, 733, 734, 735, 738, 740, 737, 738, 740, 741, 742, 745, 747, 744, 745, 747, 
   748, 749, 752, 756, 751, 752, 756, 757, 758, 761, 765, 760, 761, 765, 766, 767, 
   771, 772, 773, 776, 777, 778, 781, 782, 783, 787, 788, 789, 793, 794, 795, 799, 
   800, 801, 805, 806, 807, 811, 812, 813, 818, 822, 824, 828, 815, 818, 822, 824, 
   828, 829, 830, 834, 835, 836, 840, 841, 842, 846, 847, 844, 846, 847, 848, 849, 
   853, 855, 851, 853, 855, 856, 857, 860, 861, 859, 860, 861, 870, 871, 874, 875, 
   876, 879, 894, 878, 879, 894, 880, 882, 883, 880, 887, 888, 882, 883, 889, 880, 
   890, 887, 888, 882, 883, 891, 892, 893, 880, 887, 888, 882, 883, 880, 890, 887, 
   888, 882, 883, 880, 890, 887, 888, 882, 883, 891, 880, 890, 887, 888, 882, 883, 
   891, 892, 896, 888, 880, 882, 883, 897, 898, 896, 888, 880, 882, 883, 899, 900, 
   901, 896, 888, 880, 882, 883, 898, 896, 888, 880, 882, 883, 898, 896, 888, 880, 
   882, 883, 899, 898, 896, 888, 880, 882, 883, 899, 900, 902, 903, 906, 919, 905, 
   906, 919, 907, 912, 913, 908, 914, 907, 915, 912, 913, 908, 916, 917, 918, 907, 
   912, 913, 908, 907, 915, 912, 913, 908, 907, 915, 912, 913, 908, 916, 907, 915, 
   912, 913, 908, 916, 917, 921, 913, 907, 908, 922, 923, 921, 913, 907, 908, 924, 
   925, 926, 921, 913, 907, 908, 923, 921, 913, 907, 908, 923, 921, 913, 907, 908, 
   924, 923, 921, 913, 907, 908, 924, 925, 927, 928, 931, 945, 954, 937, 940, 941, 
   944, 941, 943, 944, 963, 966, 955, 958, 959, 962, 959, 961, 962, 975, 679, 682, 
   684, 978, 686, 689, 691, 981, 693, 696, 699, 984, 701, 704, 706, 987, 708, 711, 
   713, 990, 715, 718, 719, 993, 721, 724, 726, 996, 728, 731, 733, 999, 735, 738, 
   740, 1002, 742, 745, 747, 1005, 749, 752, 756, 1008, 758, 761, 765, 1011, 767, 771, 
   1014, 773, 776, 1017, 778, 781, 1020, 783, 787, 1023, 789, 793, 1026, 795, 799, 1029, 
   801, 805, 1032, 807, 811, 1035, 813, 818, 822, 824, 828, 1038, 830, 834, 1041, 836, 
   840, 1044, 842, 846, 847, 1047, 849, 853, 855, 1050, 857, 860, 861, 1053, 871, 874, 
   1056, 876, 879, 894, 1059, 903, 906, 919, 1062, 928, 931, 464, 499, 500, 501, 465, 
   466, 521, 502, 513, 54, 55, 68, 970, 972, 630, 631, 664, 292, 294, 283, 286, 
   289, 273, 276, 279, 1, 2, 94, 103, 104, 213, 96, 97, 108, 109, 124, 125, 
   133, 144, 152, 153, 174, 176, 177, 178, 190, 192, 193, 194, 203, 204, 133, 144, 
   231, 232, 243, 244, 318, 319, 327, 328, 338, 339, 347, 348, 356, 357, 365, 366, 
   374, 375, 383, 384, 393, 394, 406, 408, 409, 410, 420, 422, 423, 424, 436, 438, 
   439, 440, 450, 452, 453, 454, 554, 555, 571, 572, 580, 582, 583, 584, 596, 598, 
   599, 600, 610, 611, 622, 623, 680, 681, 687, 688, 694, 695, 702, 703, 709, 710, 
   716, 717, 722, 723, 729, 730, 736, 737, 743, 744, 750, 751, 759, 760, 768, 769, 
   774, 775, 779, 780, 784, 785, 790, 791, 796, 797, 802, 803, 808, 809, 814, 815, 
   831, 832, 837, 838, 843, 844, 850, 851, 858, 859, 863, 866, 869, 872, 873, 877, 
   878, 904, 905, 929, 930, 934, 935, 939, 940, 957, 958, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\57\52", "\74\41\55\55", 
"\55\55\76", null, "\174\75", null, null, "\55", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\175", "\136\75", "\44\75", 
"\52\75", "\75", "\73", "\57", "\133", "\135", "\52", "\56", "\51", "\50", "\72", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\72\72", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\41", "\44", "\45", "\46", "\140", "\77", "\74", "\174", "\74\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CssParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CssParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 1068; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffe00001L, 0xff803fffffffffffL, 0x1ffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[1068];
    private final int[] jjstateSet = new int[2 * 1068];

    
    protected char curChar;
}
