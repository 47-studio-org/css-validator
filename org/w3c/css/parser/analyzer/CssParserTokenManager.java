/* CssParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CssParserTokenManager.java */
package org.w3c.css.parser.analyzer;
import org.w3c.css.atrules.css.AtRuleCounterStyle;
import org.w3c.css.atrules.css.AtRuleFontFace;
import org.w3c.css.atrules.css.AtRuleKeyframes;
import org.w3c.css.atrules.css.AtRuleMedia;
import org.w3c.css.atrules.css.AtRulePage;
import org.w3c.css.atrules.css.AtRulePhoneticAlphabet;
import org.w3c.css.atrules.css.AtRulePreference;
import org.w3c.css.atrules.css.AtRuleSupports;
import org.w3c.css.atrules.css.AtRuleViewport;
import org.w3c.css.atrules.css.media.MediaFeature;
import org.w3c.css.atrules.css.media.MediaRangeFeature;
import org.w3c.css.atrules.css.supports.SupportsFeature;
import org.w3c.css.atrules.svg.AtRuleColorProfile;
import org.w3c.css.parser.AtRule;
import org.w3c.css.parser.CssError;
import org.w3c.css.parser.CssErrorToken;
import org.w3c.css.parser.CssParseException;
import org.w3c.css.parser.CssSelectors;
import org.w3c.css.properties.css.CssProperty;
import org.w3c.css.selectors.AttributeSelector;
import org.w3c.css.selectors.ClassSelector;
import org.w3c.css.selectors.IdSelector;
import org.w3c.css.selectors.TypeSelector;
import org.w3c.css.selectors.UniversalSelector;
import org.w3c.css.selectors.attributes.AttributeAny;
import org.w3c.css.selectors.attributes.AttributeBegin;
import org.w3c.css.selectors.attributes.AttributeExact;
import org.w3c.css.selectors.attributes.AttributeOneOf;
import org.w3c.css.selectors.attributes.AttributeStart;
import org.w3c.css.selectors.attributes.AttributeSubstr;
import org.w3c.css.selectors.attributes.AttributeSuffix;
import org.w3c.css.util.ApplContext;
import org.w3c.css.util.CssProfile;
import org.w3c.css.util.CssVersion;
import org.w3c.css.util.InvalidParamException;
import org.w3c.css.util.StringUtils;
import org.w3c.css.util.Util;
import org.w3c.css.util.WarningParamException;
import org.w3c.css.values.CssANPlusB;
import org.w3c.css.values.CssAngle;
import org.w3c.css.values.CssAttr;
import org.w3c.css.values.CssBracket;
import org.w3c.css.values.CssCalc;
import org.w3c.css.values.CssCheckableValue;
import org.w3c.css.values.CssClamp;
import org.w3c.css.values.CssColor;
import org.w3c.css.values.CssComparator;
import org.w3c.css.values.CssExpression;
import org.w3c.css.values.CssFlexibleLength;
import org.w3c.css.values.CssFrequency;
import org.w3c.css.values.CssFunction;
import org.w3c.css.values.CssHashIdent;
import org.w3c.css.values.CssIdent;
import org.w3c.css.values.CssImage;
import org.w3c.css.values.CssLength;
import org.w3c.css.values.CssMax;
import org.w3c.css.values.CssMin;
import org.w3c.css.values.CssNumber;
import org.w3c.css.values.CssOperator;
import org.w3c.css.values.CssPercentage;
import org.w3c.css.values.CssRatio;
import org.w3c.css.values.CssResolution;
import org.w3c.css.values.CssSemitone;
import org.w3c.css.values.CssString;
import org.w3c.css.values.CssSwitch;
import org.w3c.css.values.CssTime;
import org.w3c.css.values.CssTypes;
import org.w3c.css.values.CssURL;
import org.w3c.css.values.CssUnicodeRange;
import org.w3c.css.values.CssValue;
import org.w3c.css.values.CssVariable;
import org.w3c.css.values.CssVolume;
import static org.w3c.css.util.StringUtils.convertIdent;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings("unused")public class CssParserTokenManager implements CssParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 149;
         return jjMoveNfa_0(7, 0);
      case 36:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 151;
         return jjMoveNfa_0(7, 0);
      case 38:
         jjmatchedKind = 152;
         return jjMoveNfa_0(7, 0);
      case 40:
         jjmatchedKind = 62;
         return jjMoveNfa_0(7, 0);
      case 41:
         jjmatchedKind = 61;
         return jjMoveNfa_0(7, 0);
      case 42:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 45:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 60;
         return jjMoveNfa_0(7, 0);
      case 47:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L, 0x0L);
      case 59:
         jjmatchedKind = 55;
         return jjMoveNfa_0(7, 0);
      case 60:
         jjmatchedKind = 155;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0x20000000L);
      case 61:
         jjmatchedKind = 54;
         return jjMoveNfa_0(7, 0);
      case 63:
         jjmatchedKind = 154;
         return jjMoveNfa_0(7, 0);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffffff80000L, 0x0L);
      case 91:
         jjmatchedKind = 57;
         return jjMoveNfa_0(7, 0);
      case 93:
         jjmatchedKind = 58;
         return jjMoveNfa_0(7, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 96:
         jjmatchedKind = 153;
         return jjMoveNfa_0(7, 0);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1aL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L, 0xfe0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1L);
      case 124:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x0L);
      case 125:
         jjmatchedKind = 50;
         return jjMoveNfa_0(7, 0);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 42:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 58:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x24002L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7c000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x380000080000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000002000000000L, active2, 0x2000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x380000000L, active2, 0x8004L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000000L, active1, 0x4000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L, active2, 0x818L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x440000100000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c00000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000800000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3e00000L, active2, 0x107e0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 2;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 62:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000100000L, active2, 0x8000L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x28380000000L, active2, 0x1L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000080000L, active2, 0x7e0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1001c00000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x2000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x39007fe00000L, active2, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000040000000000L, active2, 0x20000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1aL);
      case 84:
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         break;
      case 45:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x7e0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1040000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x380000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000001c00100000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L, active2, 0x8000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x802003e00000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10001L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x7c000000L, active2, 0x1cL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 4;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa5_0(active1, 0x3e00000L, active2, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0xa0L);
      case 69:
      case 101:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x4000000000L, active2, 0x1L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active1, 0x60000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active1, 0x1c00000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x8000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0L, active2, 0x540L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active1, 0x700000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x82000000000L, active2, 0x200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000000L, active2, 0x8000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x80000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active1, 0x103fc000000L, active2, 0x4L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active1, 0x1000000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 5;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa6_0(active1, 0x10380000000L, active2, 0L);
      case 65:
      case 97:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x540L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active1, 0x800000L, active2, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active1, 0x440000000000L, active2, 0x4L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x200L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x600000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active1, 0x80007c000000L, active2, 0x80L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x1000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active1, 0xa2003000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active1, 0x4000080000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active1, 0x301c00000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active1, 0x81c00000000L, active2, 0x200L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active1, 0x200000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active1, 0x300000e80000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active1, 0x10000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active1, 0x3000000L, active2, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x80L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active1, 0x17c000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000000L, active2, 0x10L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active1, 0x4000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active1, 0x840000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x540L);
      case 84:
      case 116:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x400080000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa8_0(active1, 0x7c000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x14000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active1, 0x1000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active1, 0x40000000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active1, 0x600000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active1, 0x3000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x400100000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x20L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active1, 0x20800000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x800000L, active2, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x280000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x80000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x1200000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x800400000000L, active2, 0x740L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active1, 0x200000000000L, active2, 0x540L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x414010000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active1, 0x100000000L, active2, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active1, 0x3000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x800000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0xc000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x1400000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x80060000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 8;
         }
         break;
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x200a00000L, active2, 0x10L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x200L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 9;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000200000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000000L, active2, 0x140L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active1, 0x900000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x1c800000L, active2, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x60000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x80000000000L, active2, 0x400L);
      case 80:
      case 112:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x200L);
      case 83:
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x200000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x1202000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 9);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0x200000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active1, 0x800000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x200L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000c000000L, active2, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active1, 0x60000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x40L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x100000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0x200000000L, active2, 0x100L);
      case 82:
      case 114:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 10;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x201000000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 10);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 11;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0x2000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 11;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active1, 0x60000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x80000000000L, active2, 0x40L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0x400800000000L, active2, 0x100L);
      case 77:
      case 109:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 11;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000200000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x14000000L, active2, 0x10L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa12_0(active1, 0x200000000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 11);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 12;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 12;
         }
         break;
      case 45:
         return jjMoveStringLiteralDfa13_0(active1, 0x4000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x280000000000L, active2, 0x40L);
      case 77:
      case 109:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 12;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x2000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x200000L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x40000000L, active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 12);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0x4000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x40L);
      case 69:
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 13;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 13;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa14_0(active1, 0x400000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x200000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active1, 0x2000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 13);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 14;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x2000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x4000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 14);
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa16_0(active1, 0x400000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active1, 0x2000000L, active2, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x40000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active1, 0x4000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 15);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 15);
   }
   switch(curChar)
   {
      case 40:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 16;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x400000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active1, 0x4000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active1, 0x40000000L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(7, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 16);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active1, 0x40000000L);
      case 84:
      case 116:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 17);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 17);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active1, 0x40000000L);
      case 82:
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 18;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 18);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 18);
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 19);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 1122;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     { jjCheckNAddStates(0, 171); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     { jjCheckNAddStates(172, 197); }
                  }
                  else if (curChar == 33)
                     { jjCheckNAddStates(198, 201); }
                  else if (curChar == 46)
                     { jjCheckNAddStates(202, 237); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(238, 242); }
                  else if (curChar == 45)
                     { jjAddStates(243, 247); }
                  else if (curChar == 39)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAddStates(248, 252); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAddStates(253, 257); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 217;
                  else if (curChar == 44)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 43)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 45)
                     { jjAddStates(258, 259); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(260, 264); }
                  else if (curChar == 62)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 42)
                     { jjCheckNAddStates(265, 267); }
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(268, 270); }
                  break;
               case 6:
                  if (curChar == 47 && kind > 1)
                     kind = 1;
                  break;
               case 9:
                  if (curChar == 43 && kind > 32)
                     kind = 32;
                  break;
               case 10:
                  if (curChar == 62 && kind > 34)
                     kind = 34;
                  break;
               case 11:
                  if (curChar == 61 && kind > 35)
                     kind = 35;
                  break;
               case 12:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 44 && kind > 36)
                     kind = 36;
                  break;
               case 16:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     { jjAddStates(271, 272); }
                  break;
               case 19:
                  if (curChar == 41 && kind > 48)
                     kind = 48;
                  break;
               case 29:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 46:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 54:
                  if (curChar == 45)
                     { jjAddStates(273, 274); }
                  break;
               case 56:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 58:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(275, 279); }
                  break;
               case 60:
                  if (curChar != 10)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 61:
               case 70:
                  if (curChar == 13)
                     { jjCheckNAdd(60); }
                  break;
               case 62:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(280, 287); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(288, 291); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(292, 296); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(297, 302); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(303, 309); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(310, 314); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(315, 322); }
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(323, 326); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(327, 331); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(332, 337); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(338, 344); }
                  break;
               case 76:
                  if (curChar == 40 && kind > 140)
                     kind = 140;
                  break;
               case 81:
                  if (curChar == 60)
                     { jjCheckNAddStates(260, 264); }
                  break;
               case 83:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(345, 349); }
                  break;
               case 84:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 85:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 86:
                  if (curChar == 42)
                     { jjCheckNAddStates(350, 352); }
                  break;
               case 87:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 88:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 89:
                  if (curChar == 42)
                     { jjCheckNAddStates(353, 355); }
                  break;
               case 90:
                  if (curChar == 47)
                     { jjCheckNAddStates(345, 349); }
                  break;
               case 91:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 92:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(93, 202); }
                  break;
               case 94:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(356, 361); }
                  break;
               case 95:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(362, 367); }
                  break;
               case 96:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 97:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 98:
                  if (curChar == 42)
                     { jjCheckNAddStates(368, 370); }
                  break;
               case 99:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(100, 101); }
                  break;
               case 100:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(100, 101); }
                  break;
               case 101:
                  if (curChar == 42)
                     { jjCheckNAddStates(371, 373); }
                  break;
               case 102:
                  if (curChar == 47)
                     { jjCheckNAddStates(362, 367); }
                  break;
               case 103:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 104:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(105, 121); }
                  break;
               case 106:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 107:
                  if (curChar == 61)
                     { jjCheckNAddStates(377, 381); }
                  break;
               case 108:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(109, 151); }
                  break;
               case 110:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(382, 387); }
                  break;
               case 111:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(388, 393); }
                  break;
               case 112:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(113, 114); }
                  break;
               case 113:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(113, 114); }
                  break;
               case 114:
                  if (curChar == 42)
                     { jjCheckNAddStates(394, 396); }
                  break;
               case 115:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(116, 117); }
                  break;
               case 116:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(116, 117); }
                  break;
               case 117:
                  if (curChar == 42)
                     { jjCheckNAddStates(397, 399); }
                  break;
               case 118:
                  if (curChar == 47)
                     { jjCheckNAddStates(388, 393); }
                  break;
               case 119:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 120:
                  if (curChar == 62 && kind > 147)
                     kind = 147;
                  break;
               case 122:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(400, 405); }
                  break;
               case 125:
                  if (curChar == 10)
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 126:
               case 134:
                  if (curChar == 13)
                     { jjCheckNAdd(125); }
                  break;
               case 127:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(406, 414); }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(415, 419); }
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(420, 425); }
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(426, 432); }
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(433, 440); }
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(441, 446); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(447, 455); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(456, 460); }
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(461, 466); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(467, 473); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(474, 481); }
                  break;
               case 141:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(382, 387); }
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(482, 489); }
                  break;
               case 143:
                  if (curChar == 10)
                     { jjCheckNAddStates(382, 387); }
                  break;
               case 144:
               case 153:
                  if (curChar == 13)
                     { jjCheckNAdd(143); }
                  break;
               case 145:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(490, 498); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(499, 509); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(510, 516); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(517, 524); }
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(525, 533); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(534, 543); }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(544, 551); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(552, 562); }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(563, 569); }
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(570, 577); }
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(578, 586); }
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(587, 596); }
                  break;
               case 159:
                  if (curChar == 34)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 160:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 161:
                  if (curChar == 34)
                     { jjCheckNAddStates(600, 604); }
                  break;
               case 163:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 164:
                  if (curChar == 10)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 165:
               case 168:
                  if (curChar == 13)
                     { jjCheckNAdd(164); }
                  break;
               case 166:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(605, 610); }
                  break;
               case 169:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(611, 619); }
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(620, 624); }
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(625, 630); }
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(631, 637); }
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(638, 645); }
                  break;
               case 175:
                  if (curChar == 39)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 176:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 177:
                  if (curChar == 39)
                     { jjCheckNAddStates(600, 604); }
                  break;
               case 179:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 180:
                  if (curChar == 10)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 181:
               case 184:
                  if (curChar == 13)
                     { jjCheckNAdd(180); }
                  break;
               case 182:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(649, 654); }
                  break;
               case 185:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(655, 663); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(664, 668); }
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(669, 674); }
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(675, 681); }
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(682, 689); }
                  break;
               case 192:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(356, 361); }
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(690, 697); }
                  break;
               case 194:
                  if (curChar == 10)
                     { jjCheckNAddStates(356, 361); }
                  break;
               case 195:
               case 204:
                  if (curChar == 13)
                     { jjCheckNAdd(194); }
                  break;
               case 196:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(698, 706); }
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(707, 717); }
                  break;
               case 198:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(718, 724); }
                  break;
               case 199:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(725, 732); }
                  break;
               case 200:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(733, 741); }
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(742, 751); }
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(752, 759); }
                  break;
               case 205:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(760, 770); }
                  break;
               case 206:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(771, 777); }
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(778, 785); }
                  break;
               case 208:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(786, 794); }
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(795, 804); }
                  break;
               case 216:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 47)
                     { jjCheckNAddStates(805, 808); }
                  break;
               case 218:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(809, 813); }
                  break;
               case 219:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(220, 221); }
                  break;
               case 220:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(220, 221); }
                  break;
               case 221:
                  if (curChar == 42)
                     { jjCheckNAddStates(814, 816); }
                  break;
               case 222:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(223, 224); }
                  break;
               case 223:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(223, 224); }
                  break;
               case 224:
                  if (curChar == 42)
                     { jjCheckNAddStates(817, 819); }
                  break;
               case 225:
                  if (curChar == 47)
                     { jjCheckNAddStates(809, 813); }
                  break;
               case 226:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 227:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(228, 251); }
                  break;
               case 229:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(820, 823); }
                  break;
               case 230:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(824, 826); }
                  break;
               case 231:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(232, 233); }
                  break;
               case 232:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(232, 233); }
                  break;
               case 233:
                  if (curChar == 42)
                     { jjCheckNAddStates(827, 829); }
                  break;
               case 234:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(235, 236); }
                  break;
               case 235:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(235, 236); }
                  break;
               case 236:
                  if (curChar == 42)
                     { jjCheckNAddStates(830, 832); }
                  break;
               case 237:
                  if (curChar == 47)
                     { jjCheckNAddStates(824, 826); }
                  break;
               case 238:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 239:
                  if (curChar == 62 && kind > 148)
                     kind = 148;
                  break;
               case 241:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(820, 823); }
                  break;
               case 242:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(833, 838); }
                  break;
               case 243:
                  if (curChar == 10)
                     { jjCheckNAddStates(820, 823); }
                  break;
               case 244:
               case 253:
                  if (curChar == 13)
                     { jjCheckNAdd(243); }
                  break;
               case 245:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(839, 844); }
                  break;
               case 246:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(845, 853); }
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(854, 858); }
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(859, 864); }
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(865, 871); }
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(872, 879); }
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(880, 885); }
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(886, 894); }
                  break;
               case 255:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(895, 899); }
                  break;
               case 256:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(900, 905); }
                  break;
               case 257:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(906, 912); }
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(913, 920); }
                  break;
               case 259:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 260:
                  if (curChar == 45)
                     { jjAddStates(258, 259); }
                  break;
               case 265:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 273:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 281:
                  if (curChar == 43)
                     { jjAddStates(921, 922); }
                  break;
               case 282:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 283:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(923, 926); }
                  break;
               case 284:
                  if (curChar == 63 && kind > 123)
                     kind = 123;
                  break;
               case 285:
               case 301:
               case 305:
               case 308:
               case 311:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(284); }
                  break;
               case 286:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(284, 285); }
                  break;
               case 287:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(927, 929); }
                  break;
               case 288:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjAddStates(930, 935); }
                  break;
               case 289:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 290:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 291:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 292:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(293); }
                  break;
               case 293:
                  if ((0x3ff000000000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 294:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 295:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 296:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 297:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(284); }
                  break;
               case 298:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 299:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 300:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 302:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 303:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 304:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(284, 305); }
                  break;
               case 306:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 307:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(936, 938); }
                  break;
               case 309:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(284, 308); }
                  break;
               case 310:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(939, 942); }
                  break;
               case 312:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(284, 311); }
                  break;
               case 313:
                  if (curChar != 63)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(943, 945); }
                  break;
               case 314:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 315:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(316, 322); }
                  break;
               case 316:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 317:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 318:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(946, 949); }
                  break;
               case 319:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(293); }
                  break;
               case 320:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(293, 319); }
                  break;
               case 321:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(950, 952); }
                  break;
               case 322:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(953, 957); }
                  break;
               case 323:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(316); }
                  break;
               case 324:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(323, 316); }
                  break;
               case 325:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(958, 960); }
                  break;
               case 326:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(961, 964); }
                  break;
               case 330:
                  if (curChar == 40 && kind > 24)
                     kind = 24;
                  break;
               case 333:
                  if (curChar == 10)
                     { jjCheckNAdd(330); }
                  break;
               case 334:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 335:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAdd(330); }
                  break;
               case 336:
                  if (curChar == 52)
                     { jjCheckNAdd(332); }
                  break;
               case 337:
                  if (curChar == 54)
                     { jjCheckNAdd(332); }
                  break;
               case 338:
                  if (curChar == 48)
                     { jjCheckNAddStates(965, 969); }
                  break;
               case 339:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(336, 337); }
                  break;
               case 340:
                  if (curChar == 48)
                     { jjCheckNAddStates(970, 972); }
                  break;
               case 341:
                  if (curChar == 48)
                     { jjCheckNAddStates(973, 976); }
                  break;
               case 343:
                  if (curChar == 50)
                     { jjCheckNAddStates(977, 980); }
                  break;
               case 344:
                  if (curChar == 10)
                     { jjCheckNAddTwoStates(329, 331); }
                  break;
               case 345:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 346:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddTwoStates(329, 331); }
                  break;
               case 347:
                  if (curChar == 53)
                     { jjCheckNAdd(343); }
                  break;
               case 348:
                  if (curChar == 55)
                     { jjCheckNAdd(343); }
                  break;
               case 349:
                  if (curChar == 48)
                     { jjCheckNAddStates(981, 985); }
                  break;
               case 350:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(347, 348); }
                  break;
               case 351:
                  if (curChar == 48)
                     { jjCheckNAddStates(986, 988); }
                  break;
               case 352:
                  if (curChar == 48)
                     { jjCheckNAddStates(989, 992); }
                  break;
               case 355:
                  if (curChar == 40)
                     { jjCheckNAddStates(993, 998); }
                  break;
               case 356:
                  if (curChar == 34)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 357:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 358:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(359, 368); }
                  break;
               case 359:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1002, 1004); }
                  break;
               case 360:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(361, 362); }
                  break;
               case 361:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(361, 362); }
                  break;
               case 362:
                  if (curChar == 42)
                     { jjCheckNAddStates(1005, 1007); }
                  break;
               case 363:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(364, 365); }
                  break;
               case 364:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(364, 365); }
                  break;
               case 365:
                  if (curChar == 42)
                     { jjCheckNAddStates(1008, 1010); }
                  break;
               case 366:
                  if (curChar == 47)
                     { jjCheckNAddStates(1002, 1004); }
                  break;
               case 367:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 360;
                  break;
               case 368:
                  if (curChar == 41 && kind > 64)
                     kind = 64;
                  break;
               case 370:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 371:
                  if (curChar == 10)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 372:
               case 375:
                  if (curChar == 13)
                     { jjCheckNAdd(371); }
                  break;
               case 373:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 374:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1011, 1016); }
                  break;
               case 376:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 377:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1017, 1025); }
                  break;
               case 378:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1026, 1030); }
                  break;
               case 379:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1031, 1036); }
                  break;
               case 380:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1037, 1043); }
                  break;
               case 381:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1044, 1051); }
                  break;
               case 382:
                  if (curChar == 39)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 383:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 384:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(359, 368); }
                  break;
               case 386:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 387:
                  if (curChar == 10)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 388:
               case 391:
                  if (curChar == 13)
                     { jjCheckNAdd(387); }
                  break;
               case 389:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 390:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1055, 1060); }
                  break;
               case 392:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 393:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1061, 1069); }
                  break;
               case 394:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1070, 1074); }
                  break;
               case 395:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1075, 1080); }
                  break;
               case 396:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1081, 1087); }
                  break;
               case 397:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1088, 1095); }
                  break;
               case 398:
                  if ((0xfffffc7a00000000L & l) != 0L)
                     { jjCheckNAddStates(1096, 1099); }
                  break;
               case 400:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1096, 1099); }
                  break;
               case 401:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1100, 1105); }
                  break;
               case 402:
                  if (curChar == 10)
                     { jjCheckNAddStates(1096, 1099); }
                  break;
               case 403:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 402;
                  break;
               case 404:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1106, 1111); }
                  break;
               case 405:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1112, 1120); }
                  break;
               case 406:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1121, 1125); }
                  break;
               case 407:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1126, 1131); }
                  break;
               case 408:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1132, 1138); }
                  break;
               case 409:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1139, 1146); }
                  break;
               case 410:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1147, 1155); }
                  break;
               case 411:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(412, 413); }
                  break;
               case 412:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(412, 413); }
                  break;
               case 413:
                  if (curChar == 42)
                     { jjCheckNAddStates(1156, 1158); }
                  break;
               case 414:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(415, 416); }
                  break;
               case 415:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(415, 416); }
                  break;
               case 416:
                  if (curChar == 42)
                     { jjCheckNAddStates(1159, 1161); }
                  break;
               case 417:
                  if (curChar == 47)
                     { jjCheckNAddStates(1162, 1168); }
                  break;
               case 418:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 411;
                  break;
               case 421:
                  if (curChar == 10)
                     { jjCheckNAdd(355); }
                  break;
               case 422:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 421;
                  break;
               case 423:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAdd(355); }
                  break;
               case 424:
                  if (curChar == 52)
                     { jjCheckNAdd(420); }
                  break;
               case 425:
                  if (curChar == 54)
                     { jjCheckNAdd(420); }
                  break;
               case 426:
                  if (curChar == 48)
                     { jjCheckNAddStates(1169, 1173); }
                  break;
               case 427:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(424, 425); }
                  break;
               case 428:
                  if (curChar == 48)
                     { jjCheckNAddStates(1174, 1176); }
                  break;
               case 429:
                  if (curChar == 48)
                     { jjCheckNAddStates(1177, 1180); }
                  break;
               case 431:
                  if (curChar == 50)
                     { jjCheckNAddStates(1181, 1184); }
                  break;
               case 432:
                  if (curChar == 10)
                     { jjCheckNAddTwoStates(354, 419); }
                  break;
               case 433:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 432;
                  break;
               case 434:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddTwoStates(354, 419); }
                  break;
               case 435:
                  if (curChar == 53)
                     { jjCheckNAdd(431); }
                  break;
               case 436:
                  if (curChar == 55)
                     { jjCheckNAdd(431); }
                  break;
               case 437:
                  if (curChar == 48)
                     { jjCheckNAddStates(1185, 1189); }
                  break;
               case 438:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(435, 436); }
                  break;
               case 439:
                  if (curChar == 48)
                     { jjCheckNAddStates(1190, 1192); }
                  break;
               case 440:
                  if (curChar == 48)
                     { jjCheckNAddStates(1193, 1196); }
                  break;
               case 442:
                  if (curChar == 53)
                     { jjCheckNAddStates(1197, 1200); }
                  break;
               case 443:
                  if (curChar == 10)
                     { jjCheckNAddTwoStates(328, 342); }
                  break;
               case 444:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 443;
                  break;
               case 445:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddTwoStates(328, 342); }
                  break;
               case 446:
                  if (curChar == 53)
                     { jjCheckNAdd(442); }
                  break;
               case 447:
                  if (curChar == 55)
                     { jjCheckNAdd(442); }
                  break;
               case 448:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 449:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 451:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1201, 1205); }
                  break;
               case 452:
                  if (curChar != 10)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 453:
               case 461:
                  if (curChar == 13)
                     { jjCheckNAdd(452); }
                  break;
               case 454:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 455:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1206, 1213); }
                  break;
               case 456:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1214, 1217); }
                  break;
               case 457:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1218, 1222); }
                  break;
               case 458:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1223, 1228); }
                  break;
               case 459:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1229, 1235); }
                  break;
               case 460:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1236, 1240); }
                  break;
               case 462:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1241, 1248); }
                  break;
               case 463:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1249, 1252); }
                  break;
               case 464:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1253, 1257); }
                  break;
               case 465:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1258, 1263); }
                  break;
               case 466:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1264, 1270); }
                  break;
               case 467:
                  if (curChar == 53)
                     { jjCheckNAddStates(1271, 1274); }
                  break;
               case 468:
                  if (curChar == 10)
                     { jjCheckNAddTwoStates(353, 430); }
                  break;
               case 469:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 468;
                  break;
               case 470:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddTwoStates(353, 430); }
                  break;
               case 471:
                  if (curChar == 53)
                     { jjCheckNAdd(467); }
                  break;
               case 472:
                  if (curChar == 55)
                     { jjCheckNAdd(467); }
                  break;
               case 473:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 474:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 475:
                  if (curChar == 40 && kind > 146)
                     kind = 146;
                  break;
               case 477:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1278, 1283); }
                  break;
               case 478:
                  if (curChar == 10)
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 479:
               case 487:
                  if (curChar == 13)
                     { jjCheckNAdd(478); }
                  break;
               case 480:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 481:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1284, 1292); }
                  break;
               case 482:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1293, 1297); }
                  break;
               case 483:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1298, 1303); }
                  break;
               case 484:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1304, 1310); }
                  break;
               case 485:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1311, 1318); }
                  break;
               case 486:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1319, 1324); }
                  break;
               case 488:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1325, 1333); }
                  break;
               case 489:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1334, 1338); }
                  break;
               case 490:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1339, 1344); }
                  break;
               case 491:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1345, 1351); }
                  break;
               case 492:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1352, 1359); }
                  break;
               case 493:
                  if (curChar == 48)
                     { jjCheckNAddStates(1360, 1364); }
                  break;
               case 494:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(471, 472); }
                  break;
               case 495:
                  if (curChar == 48)
                     { jjCheckNAddStates(1365, 1367); }
                  break;
               case 496:
                  if (curChar == 48)
                     { jjCheckNAddStates(1368, 1371); }
                  break;
               case 497:
                  if (curChar == 48)
                     { jjCheckNAddStates(1372, 1376); }
                  break;
               case 498:
                  if (curChar == 48)
                     { jjCheckNAddTwoStates(446, 447); }
                  break;
               case 499:
                  if (curChar == 48)
                     { jjCheckNAddStates(1377, 1379); }
                  break;
               case 500:
                  if (curChar == 48)
                     { jjCheckNAddStates(1380, 1383); }
                  break;
               case 501:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddStates(172, 197); }
                  break;
               case 502:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(503, 504); }
                  break;
               case 503:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(503, 504); }
                  break;
               case 504:
                  if (curChar == 42)
                     { jjCheckNAddStates(1384, 1386); }
                  break;
               case 505:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(506, 507); }
                  break;
               case 506:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(506, 507); }
                  break;
               case 507:
                  if (curChar == 42)
                     { jjCheckNAddStates(1387, 1389); }
                  break;
               case 508:
                  if (curChar != 47)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(509, 510); }
                  break;
               case 509:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 502;
                  break;
               case 510:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  { jjCheckNAddTwoStates(509, 510); }
                  break;
               case 511:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(512, 513); }
                  break;
               case 512:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(512, 513); }
                  break;
               case 513:
                  if (curChar == 42)
                     { jjCheckNAddStates(1390, 1392); }
                  break;
               case 514:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(515, 516); }
                  break;
               case 515:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(515, 516); }
                  break;
               case 516:
                  if (curChar == 42)
                     { jjCheckNAddStates(1393, 1395); }
                  break;
               case 517:
                  if (curChar == 47)
                     { jjCheckNAddStates(1396, 1398); }
                  break;
               case 518:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 511;
                  break;
               case 519:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1396, 1398); }
                  break;
               case 521:
                  if (curChar == 61 && kind > 29)
                     kind = 29;
                  break;
               case 522:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(523, 524); }
                  break;
               case 523:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(523, 524); }
                  break;
               case 524:
                  if (curChar == 42)
                     { jjCheckNAddStates(1399, 1401); }
                  break;
               case 525:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(526, 527); }
                  break;
               case 526:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(526, 527); }
                  break;
               case 527:
                  if (curChar == 42)
                     { jjCheckNAddStates(1402, 1404); }
                  break;
               case 528:
                  if (curChar == 47)
                     { jjCheckNAddStates(1405, 1407); }
                  break;
               case 529:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 522;
                  break;
               case 530:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1405, 1407); }
                  break;
               case 531:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 532:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(532, 533); }
                  break;
               case 533:
                  if (curChar == 42)
                     { jjCheckNAddStates(1408, 1410); }
                  break;
               case 534:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(535, 536); }
                  break;
               case 535:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(535, 536); }
                  break;
               case 536:
                  if (curChar == 42)
                     { jjCheckNAddStates(1411, 1413); }
                  break;
               case 537:
                  if (curChar == 47)
                     { jjCheckNAddStates(1414, 1416); }
                  break;
               case 538:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 531;
                  break;
               case 539:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1414, 1416); }
                  break;
               case 540:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(541, 542); }
                  break;
               case 541:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(541, 542); }
                  break;
               case 542:
                  if (curChar == 42)
                     { jjCheckNAddStates(1417, 1419); }
                  break;
               case 543:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(544, 545); }
                  break;
               case 544:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(544, 545); }
                  break;
               case 545:
                  if (curChar == 42)
                     { jjCheckNAddStates(1420, 1422); }
                  break;
               case 546:
                  if (curChar == 47)
                     { jjCheckNAddStates(1423, 1425); }
                  break;
               case 547:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 540;
                  break;
               case 548:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1423, 1425); }
                  break;
               case 549:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(550, 551); }
                  break;
               case 550:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(550, 551); }
                  break;
               case 551:
                  if (curChar == 42)
                     { jjCheckNAddStates(1426, 1428); }
                  break;
               case 552:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(553, 554); }
                  break;
               case 553:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(553, 554); }
                  break;
               case 554:
                  if (curChar == 42)
                     { jjCheckNAddStates(1429, 1431); }
                  break;
               case 555:
                  if (curChar == 47)
                     { jjCheckNAddStates(1432, 1434); }
                  break;
               case 556:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 549;
                  break;
               case 557:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1432, 1434); }
                  break;
               case 558:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(559, 560); }
                  break;
               case 559:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(559, 560); }
                  break;
               case 560:
                  if (curChar == 42)
                     { jjCheckNAddStates(1435, 1437); }
                  break;
               case 561:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(562, 563); }
                  break;
               case 562:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(562, 563); }
                  break;
               case 563:
                  if (curChar == 42)
                     { jjCheckNAddStates(1438, 1440); }
                  break;
               case 564:
                  if (curChar == 47)
                     { jjCheckNAddStates(1441, 1443); }
                  break;
               case 565:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 558;
                  break;
               case 566:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1441, 1443); }
                  break;
               case 567:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(568, 569); }
                  break;
               case 568:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(568, 569); }
                  break;
               case 569:
                  if (curChar == 42)
                     { jjCheckNAddStates(1444, 1446); }
                  break;
               case 570:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(571, 572); }
                  break;
               case 571:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(571, 572); }
                  break;
               case 572:
                  if (curChar == 42)
                     { jjCheckNAddStates(1447, 1449); }
                  break;
               case 573:
                  if (curChar == 47)
                     { jjCheckNAddStates(1450, 1452); }
                  break;
               case 574:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 567;
                  break;
               case 575:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1450, 1452); }
                  break;
               case 577:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(578, 579); }
                  break;
               case 578:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(578, 579); }
                  break;
               case 579:
                  if (curChar == 42)
                     { jjCheckNAddStates(1453, 1455); }
                  break;
               case 580:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(581, 582); }
                  break;
               case 581:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(581, 582); }
                  break;
               case 582:
                  if (curChar == 42)
                     { jjCheckNAddStates(1456, 1458); }
                  break;
               case 583:
                  if (curChar == 47)
                     { jjCheckNAddStates(1459, 1461); }
                  break;
               case 584:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 577;
                  break;
               case 585:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1459, 1461); }
                  break;
               case 587:
                  if (curChar != 34)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(253, 257); }
                  break;
               case 588:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 589:
                  if (curChar == 34 && kind > 43)
                     kind = 43;
                  break;
               case 591:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 592:
                  if (curChar == 10)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 593:
               case 596:
                  if (curChar == 13)
                     { jjCheckNAdd(592); }
                  break;
               case 594:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 595:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1465, 1470); }
                  break;
               case 597:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 598:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1471, 1479); }
                  break;
               case 599:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1480, 1484); }
                  break;
               case 600:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1485, 1490); }
                  break;
               case 601:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1491, 1497); }
                  break;
               case 602:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1498, 1505); }
                  break;
               case 603:
                  if ((0xfffffffbffffcbffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 605:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 606:
                  if (curChar != 10)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 607:
               case 610:
                  if (curChar == 13)
                     { jjCheckNAdd(606); }
                  break;
               case 608:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 609:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1506, 1510); }
                  break;
               case 611:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 612:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1511, 1518); }
                  break;
               case 613:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1519, 1522); }
                  break;
               case 614:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1523, 1527); }
                  break;
               case 615:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1528, 1533); }
                  break;
               case 616:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1534, 1540); }
                  break;
               case 617:
                  if (curChar != 39)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(248, 252); }
                  break;
               case 618:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 619:
                  if (curChar == 39 && kind > 43)
                     kind = 43;
                  break;
               case 621:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 622:
                  if (curChar == 10)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 623:
               case 626:
                  if (curChar == 13)
                     { jjCheckNAdd(622); }
                  break;
               case 624:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 625:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1544, 1549); }
                  break;
               case 627:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 628:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1550, 1558); }
                  break;
               case 629:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1559, 1563); }
                  break;
               case 630:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1564, 1569); }
                  break;
               case 631:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1570, 1576); }
                  break;
               case 632:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1577, 1584); }
                  break;
               case 633:
                  if ((0xffffff7fffffcbffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 635:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 636:
                  if (curChar != 10)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 637:
               case 640:
                  if (curChar == 13)
                     { jjCheckNAdd(636); }
                  break;
               case 638:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 639:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1585, 1589); }
                  break;
               case 641:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 642:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1590, 1597); }
                  break;
               case 643:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1598, 1601); }
                  break;
               case 644:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1602, 1606); }
                  break;
               case 645:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1607, 1612); }
                  break;
               case 646:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1613, 1619); }
                  break;
               case 647:
                  if (curChar == 45)
                     { jjAddStates(243, 247); }
                  break;
               case 649:
                  if (curChar != 45)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjAddStates(1620, 1621); }
                  break;
               case 651:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 653:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 654:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1622, 1626); }
                  break;
               case 655:
                  if (curChar != 10)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 656:
               case 665:
                  if (curChar == 13)
                     { jjCheckNAdd(655); }
                  break;
               case 657:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 658:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1627, 1634); }
                  break;
               case 659:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1635, 1638); }
                  break;
               case 660:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1639, 1643); }
                  break;
               case 661:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1644, 1649); }
                  break;
               case 662:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1650, 1656); }
                  break;
               case 664:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1657, 1661); }
                  break;
               case 666:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1662, 1669); }
                  break;
               case 667:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1670, 1673); }
                  break;
               case 668:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1674, 1678); }
                  break;
               case 669:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1679, 1684); }
                  break;
               case 670:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1685, 1691); }
                  break;
               case 675:
                  if (curChar == 35)
                     { jjCheckNAddStates(238, 242); }
                  break;
               case 676:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(677, 690); }
                  break;
               case 678:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 680:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 681:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1692, 1696); }
                  break;
               case 682:
                  if (curChar != 10)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 683:
               case 692:
                  if (curChar == 13)
                     { jjCheckNAdd(682); }
                  break;
               case 684:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 685:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1697, 1704); }
                  break;
               case 686:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1705, 1708); }
                  break;
               case 687:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1709, 1713); }
                  break;
               case 688:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1714, 1719); }
                  break;
               case 689:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1720, 1726); }
                  break;
               case 691:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1727, 1731); }
                  break;
               case 693:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1732, 1739); }
                  break;
               case 694:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1740, 1743); }
                  break;
               case 695:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1744, 1748); }
                  break;
               case 696:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1749, 1754); }
                  break;
               case 697:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1755, 1761); }
                  break;
               case 698:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 700:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 701:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1762, 1766); }
                  break;
               case 702:
                  if (curChar != 10)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 703:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 702;
                  break;
               case 704:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 705:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1767, 1774); }
                  break;
               case 706:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1775, 1778); }
                  break;
               case 707:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1779, 1783); }
                  break;
               case 708:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1784, 1789); }
                  break;
               case 709:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1790, 1796); }
                  break;
               case 710:
                  if (curChar == 46)
                     { jjCheckNAddStates(202, 237); }
                  break;
               case 711:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1797, 1799); }
                  break;
               case 713:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(714); }
                  break;
               case 714:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(714, 716); }
                  break;
               case 717:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1800, 1802); }
                  break;
               case 719:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(720); }
                  break;
               case 720:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(720, 722); }
                  break;
               case 723:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1803, 1805); }
                  break;
               case 725:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(726); }
                  break;
               case 726:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(726, 729); }
                  break;
               case 730:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1806, 1808); }
                  break;
               case 732:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(733); }
                  break;
               case 733:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(733, 735); }
                  break;
               case 736:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1809, 1811); }
                  break;
               case 738:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(739); }
                  break;
               case 739:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(739, 741); }
                  break;
               case 742:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1812, 1814); }
                  break;
               case 744:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(745); }
                  break;
               case 745:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(745, 746); }
                  break;
               case 747:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1815, 1817); }
                  break;
               case 749:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(750); }
                  break;
               case 750:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(750, 752); }
                  break;
               case 753:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1818, 1820); }
                  break;
               case 755:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(756); }
                  break;
               case 756:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(756, 758); }
                  break;
               case 759:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1821, 1823); }
                  break;
               case 761:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(762); }
                  break;
               case 762:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(762, 764); }
                  break;
               case 765:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1824, 1826); }
                  break;
               case 767:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(768); }
                  break;
               case 768:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(768, 770); }
                  break;
               case 771:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1827, 1829); }
                  break;
               case 773:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(774); }
                  break;
               case 774:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(774, 776); }
                  break;
               case 777:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1830, 1832); }
                  break;
               case 779:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(780); }
                  break;
               case 780:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(780, 782); }
                  break;
               case 783:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1833, 1835); }
                  break;
               case 785:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(786); }
                  break;
               case 786:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(786, 790); }
                  break;
               case 791:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1836, 1838); }
                  break;
               case 793:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(794); }
                  break;
               case 794:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(794, 798); }
                  break;
               case 799:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1839, 1841); }
                  break;
               case 801:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(802); }
                  break;
               case 802:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(802, 804); }
                  break;
               case 805:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1842, 1844); }
                  break;
               case 807:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(808); }
                  break;
               case 808:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(808, 809); }
                  break;
               case 810:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1845, 1847); }
                  break;
               case 812:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(813); }
                  break;
               case 813:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(813, 814); }
                  break;
               case 815:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1848, 1850); }
                  break;
               case 817:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(818); }
                  break;
               case 818:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(818, 820); }
                  break;
               case 821:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1851, 1853); }
                  break;
               case 823:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(824); }
                  break;
               case 824:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(824, 826); }
                  break;
               case 827:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1854, 1856); }
                  break;
               case 829:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(830); }
                  break;
               case 830:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(830, 832); }
                  break;
               case 833:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1857, 1859); }
                  break;
               case 835:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(836); }
                  break;
               case 836:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(836, 838); }
                  break;
               case 839:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1860, 1862); }
                  break;
               case 841:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(842); }
                  break;
               case 842:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(842, 844); }
                  break;
               case 845:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1863, 1868); }
                  break;
               case 847:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(848); }
                  break;
               case 848:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1869, 1873); }
                  break;
               case 862:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1874, 1876); }
                  break;
               case 864:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(865); }
                  break;
               case 865:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(865, 867); }
                  break;
               case 868:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1877, 1879); }
                  break;
               case 870:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(871); }
                  break;
               case 871:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(871, 873); }
                  break;
               case 874:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1880, 1883); }
                  break;
               case 876:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(877); }
                  break;
               case 877:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1884, 1886); }
                  break;
               case 881:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1887, 1890); }
                  break;
               case 883:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(884); }
                  break;
               case 884:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1891, 1893); }
                  break;
               case 889:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1894, 1897); }
                  break;
               case 891:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(892); }
                  break;
               case 892:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1898, 1900); }
                  break;
               case 903:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1901, 1903); }
                  break;
               case 905:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(906); }
                  break;
               case 906:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(906, 907); }
                  break;
               case 908:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1904, 1907); }
                  break;
               case 910:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(911); }
                  break;
               case 911:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1908, 1910); }
                  break;
               case 913:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 914:
                  if (curChar == 57 && kind > 76)
                     kind = 76;
                  break;
               case 917:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 918:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1914, 1919); }
                  break;
               case 919:
                  if (curChar == 10)
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 920:
               case 929:
                  if (curChar == 13)
                     { jjCheckNAdd(919); }
                  break;
               case 921:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 922:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1920, 1928); }
                  break;
               case 923:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1929, 1933); }
                  break;
               case 924:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1934, 1939); }
                  break;
               case 925:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1940, 1946); }
                  break;
               case 926:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1947, 1954); }
                  break;
               case 928:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1955, 1960); }
                  break;
               case 930:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1961, 1969); }
                  break;
               case 931:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1970, 1974); }
                  break;
               case 932:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1975, 1980); }
                  break;
               case 933:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1981, 1987); }
                  break;
               case 934:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1988, 1995); }
                  break;
               case 935:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1996, 1999); }
                  break;
               case 937:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(938); }
                  break;
               case 938:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2000, 2002); }
                  break;
               case 940:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 942:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 943:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2003, 2007); }
                  break;
               case 944:
                  if (curChar != 10)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 945:
               case 954:
                  if (curChar == 13)
                     { jjCheckNAdd(944); }
                  break;
               case 946:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 947:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2008, 2015); }
                  break;
               case 948:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2016, 2019); }
                  break;
               case 949:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2020, 2024); }
                  break;
               case 950:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2025, 2030); }
                  break;
               case 951:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2031, 2037); }
                  break;
               case 953:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2038, 2042); }
                  break;
               case 955:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2043, 2050); }
                  break;
               case 956:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2051, 2054); }
                  break;
               case 957:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2055, 2059); }
                  break;
               case 958:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2060, 2065); }
                  break;
               case 959:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2066, 2072); }
                  break;
               case 960:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2073, 2075); }
                  break;
               case 962:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(963); }
                  break;
               case 963:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(963, 964); }
                  break;
               case 964:
                  if (curChar == 37 && kind > 78)
                     kind = 78;
                  break;
               case 965:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddTwoStates(965, 966); }
                  break;
               case 967:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(968); }
                  break;
               case 968:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(968); }
                  break;
               case 969:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(970, 983); }
                  break;
               case 971:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 973:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 974:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2076, 2080); }
                  break;
               case 975:
                  if (curChar != 10)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 976:
               case 985:
                  if (curChar == 13)
                     { jjCheckNAdd(975); }
                  break;
               case 977:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 978:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2081, 2088); }
                  break;
               case 979:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2089, 2092); }
                  break;
               case 980:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2093, 2097); }
                  break;
               case 981:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2098, 2103); }
                  break;
               case 982:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2104, 2110); }
                  break;
               case 984:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2111, 2115); }
                  break;
               case 986:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2116, 2123); }
                  break;
               case 987:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2124, 2127); }
                  break;
               case 988:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2128, 2132); }
                  break;
               case 989:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2133, 2138); }
                  break;
               case 990:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2139, 2145); }
                  break;
               case 991:
                  if (curChar == 33)
                     { jjCheckNAddStates(198, 201); }
                  break;
               case 992:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(2146, 2148); }
                  break;
               case 993:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(994, 995); }
                  break;
               case 994:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(994, 995); }
                  break;
               case 995:
                  if (curChar == 42)
                     { jjCheckNAddStates(2149, 2151); }
                  break;
               case 996:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(997, 998); }
                  break;
               case 997:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(997, 998); }
                  break;
               case 998:
                  if (curChar == 42)
                     { jjCheckNAddStates(2152, 2154); }
                  break;
               case 999:
                  if (curChar == 47)
                     { jjCheckNAddStates(2146, 2148); }
                  break;
               case 1000:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 993;
                  break;
               case 1010:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(2155, 2157); }
                  break;
               case 1011:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(1012, 1013); }
                  break;
               case 1012:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1012, 1013); }
                  break;
               case 1013:
                  if (curChar == 42)
                     { jjCheckNAddStates(2158, 2160); }
                  break;
               case 1014:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1015, 1016); }
                  break;
               case 1015:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1015, 1016); }
                  break;
               case 1016:
                  if (curChar == 42)
                     { jjCheckNAddStates(2161, 2163); }
                  break;
               case 1017:
                  if (curChar == 47)
                     { jjCheckNAddStates(2155, 2157); }
                  break;
               case 1018:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 1011;
                  break;
               case 1020:
                  if ((0x280000000000000L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 1022:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddStates(0, 171); }
                  break;
               case 1023:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2164, 2166); }
                  break;
               case 1024:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1024, 1025); }
                  break;
               case 1025:
                  if (curChar == 46)
                     { jjCheckNAdd(711); }
                  break;
               case 1026:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2167, 2169); }
                  break;
               case 1027:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1027, 1028); }
                  break;
               case 1028:
                  if (curChar == 46)
                     { jjCheckNAdd(717); }
                  break;
               case 1029:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2170, 2172); }
                  break;
               case 1030:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1030, 1031); }
                  break;
               case 1031:
                  if (curChar == 46)
                     { jjCheckNAdd(723); }
                  break;
               case 1032:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2173, 2175); }
                  break;
               case 1033:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1033, 1034); }
                  break;
               case 1034:
                  if (curChar == 46)
                     { jjCheckNAdd(730); }
                  break;
               case 1035:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2176, 2178); }
                  break;
               case 1036:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1036, 1037); }
                  break;
               case 1037:
                  if (curChar == 46)
                     { jjCheckNAdd(736); }
                  break;
               case 1038:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2179, 2181); }
                  break;
               case 1039:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1039, 1040); }
                  break;
               case 1040:
                  if (curChar == 46)
                     { jjCheckNAdd(742); }
                  break;
               case 1041:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2182, 2184); }
                  break;
               case 1042:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1042, 1043); }
                  break;
               case 1043:
                  if (curChar == 46)
                     { jjCheckNAdd(747); }
                  break;
               case 1044:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2185, 2187); }
                  break;
               case 1045:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1045, 1046); }
                  break;
               case 1046:
                  if (curChar == 46)
                     { jjCheckNAdd(753); }
                  break;
               case 1047:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2188, 2190); }
                  break;
               case 1048:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1048, 1049); }
                  break;
               case 1049:
                  if (curChar == 46)
                     { jjCheckNAdd(759); }
                  break;
               case 1050:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2191, 2193); }
                  break;
               case 1051:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1051, 1052); }
                  break;
               case 1052:
                  if (curChar == 46)
                     { jjCheckNAdd(765); }
                  break;
               case 1053:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2194, 2196); }
                  break;
               case 1054:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1054, 1055); }
                  break;
               case 1055:
                  if (curChar == 46)
                     { jjCheckNAdd(771); }
                  break;
               case 1056:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2197, 2199); }
                  break;
               case 1057:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1057, 1058); }
                  break;
               case 1058:
                  if (curChar == 46)
                     { jjCheckNAdd(777); }
                  break;
               case 1059:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2200, 2202); }
                  break;
               case 1060:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1060, 1061); }
                  break;
               case 1061:
                  if (curChar == 46)
                     { jjCheckNAdd(783); }
                  break;
               case 1062:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2203, 2205); }
                  break;
               case 1063:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1063, 1064); }
                  break;
               case 1064:
                  if (curChar == 46)
                     { jjCheckNAdd(791); }
                  break;
               case 1065:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2206, 2208); }
                  break;
               case 1066:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1066, 1067); }
                  break;
               case 1067:
                  if (curChar == 46)
                     { jjCheckNAdd(799); }
                  break;
               case 1068:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2209, 2211); }
                  break;
               case 1069:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1069, 1070); }
                  break;
               case 1070:
                  if (curChar == 46)
                     { jjCheckNAdd(805); }
                  break;
               case 1071:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2212, 2214); }
                  break;
               case 1072:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1072, 1073); }
                  break;
               case 1073:
                  if (curChar == 46)
                     { jjCheckNAdd(810); }
                  break;
               case 1074:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2215, 2217); }
                  break;
               case 1075:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1075, 1076); }
                  break;
               case 1076:
                  if (curChar == 46)
                     { jjCheckNAdd(815); }
                  break;
               case 1077:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2218, 2220); }
                  break;
               case 1078:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1078, 1079); }
                  break;
               case 1079:
                  if (curChar == 46)
                     { jjCheckNAdd(821); }
                  break;
               case 1080:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2221, 2223); }
                  break;
               case 1081:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1081, 1082); }
                  break;
               case 1082:
                  if (curChar == 46)
                     { jjCheckNAdd(827); }
                  break;
               case 1083:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2224, 2226); }
                  break;
               case 1084:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1084, 1085); }
                  break;
               case 1085:
                  if (curChar == 46)
                     { jjCheckNAdd(833); }
                  break;
               case 1086:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2227, 2229); }
                  break;
               case 1087:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1087, 1088); }
                  break;
               case 1088:
                  if (curChar == 46)
                     { jjCheckNAdd(839); }
                  break;
               case 1089:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2230, 2235); }
                  break;
               case 1090:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1090, 1091); }
                  break;
               case 1091:
                  if (curChar == 46)
                     { jjCheckNAdd(845); }
                  break;
               case 1092:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2236, 2238); }
                  break;
               case 1093:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1093, 1094); }
                  break;
               case 1094:
                  if (curChar == 46)
                     { jjCheckNAdd(862); }
                  break;
               case 1095:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2239, 2241); }
                  break;
               case 1096:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1096, 1097); }
                  break;
               case 1097:
                  if (curChar == 46)
                     { jjCheckNAdd(868); }
                  break;
               case 1098:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2242, 2245); }
                  break;
               case 1099:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1099, 1100); }
                  break;
               case 1100:
                  if (curChar == 46)
                     { jjCheckNAdd(874); }
                  break;
               case 1101:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2246, 2249); }
                  break;
               case 1102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1102, 1103); }
                  break;
               case 1103:
                  if (curChar == 46)
                     { jjCheckNAdd(881); }
                  break;
               case 1104:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2250, 2253); }
                  break;
               case 1105:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1105, 1106); }
                  break;
               case 1106:
                  if (curChar == 46)
                     { jjCheckNAdd(889); }
                  break;
               case 1107:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2254, 2256); }
                  break;
               case 1108:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1108, 1109); }
                  break;
               case 1109:
                  if (curChar == 46)
                     { jjCheckNAdd(903); }
                  break;
               case 1110:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2257, 2260); }
                  break;
               case 1111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1111, 1112); }
                  break;
               case 1112:
                  if (curChar == 46)
                     { jjCheckNAdd(908); }
                  break;
               case 1113:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2261, 2264); }
                  break;
               case 1114:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1114, 1115); }
                  break;
               case 1115:
                  if (curChar == 46)
                     { jjCheckNAdd(935); }
                  break;
               case 1116:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2265, 2267); }
                  break;
               case 1117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1117, 1118); }
                  break;
               case 1118:
                  if (curChar == 46)
                     { jjCheckNAdd(960); }
                  break;
               case 1119:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddTwoStates(1119, 966); }
                  break;
               case 1120:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(1120, 1121); }
                  break;
               case 1121:
                  if (curChar == 46)
                     { jjCheckNAdd(965); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     { jjCheckNAddStates(2268, 2272); }
                  }
                  else if (curChar == 126)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAdd(521); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(2273, 2282); }
                  else if (curChar == 64)
                     { jjAddStates(2283, 2285); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 123)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2286, 2289); }
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2290, 2291); }
                  break;
               case 1:
                  { jjAddStates(2292, 2293); }
                  break;
               case 3:
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 8:
                  if (curChar == 123 && kind > 31)
                     kind = 31;
                  break;
               case 14:
                  if (curChar == 124 && kind > 38)
                     kind = 38;
                  break;
               case 15:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 20:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 21:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 64)
                     { jjAddStates(2283, 2285); }
                  break;
               case 55:
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 57:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(58, 59); }
                  break;
               case 58:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 59:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(275, 279); }
                  break;
               case 63:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(280, 287); }
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(288, 291); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(292, 296); }
                  break;
               case 66:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(297, 302); }
                  break;
               case 67:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(303, 309); }
                  break;
               case 68:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(58, 69); }
                  break;
               case 69:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(310, 314); }
                  break;
               case 71:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(315, 322); }
                  break;
               case 72:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(323, 326); }
                  break;
               case 73:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(327, 331); }
                  break;
               case 74:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(332, 337); }
                  break;
               case 75:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddStates(338, 344); }
                  break;
               case 77:
               case 261:
               case 269:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(76); }
                  break;
               case 78:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2294, 2297); }
                  break;
               case 85:
                  { jjAddStates(2298, 2299); }
                  break;
               case 87:
               case 88:
                  { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 93:
               case 94:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(356, 361); }
                  break;
               case 97:
                  { jjAddStates(2300, 2301); }
                  break;
               case 99:
               case 100:
                  { jjCheckNAddTwoStates(100, 101); }
                  break;
               case 105:
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 109:
               case 110:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(382, 387); }
                  break;
               case 113:
                  { jjAddStates(2302, 2303); }
                  break;
               case 115:
               case 116:
                  { jjCheckNAddTwoStates(116, 117); }
                  break;
               case 121:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(122, 133); }
                  break;
               case 122:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 123:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(122, 124); }
                  break;
               case 124:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(400, 405); }
                  break;
               case 128:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(406, 414); }
                  break;
               case 129:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(415, 419); }
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(420, 425); }
                  break;
               case 131:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(426, 432); }
                  break;
               case 132:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(433, 440); }
                  break;
               case 133:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(441, 446); }
                  break;
               case 135:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(447, 455); }
                  break;
               case 136:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(456, 460); }
                  break;
               case 137:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(461, 466); }
                  break;
               case 138:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(467, 473); }
                  break;
               case 139:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(474, 481); }
                  break;
               case 140:
                  if (curChar == 92)
                     { jjCheckNAddStates(2304, 2307); }
                  break;
               case 141:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(382, 387); }
                  break;
               case 142:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(482, 489); }
                  break;
               case 146:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(499, 509); }
                  break;
               case 147:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(510, 516); }
                  break;
               case 148:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(517, 524); }
                  break;
               case 149:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(525, 533); }
                  break;
               case 150:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(534, 543); }
                  break;
               case 151:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(141, 152); }
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(544, 551); }
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(552, 562); }
                  break;
               case 155:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(563, 569); }
                  break;
               case 156:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(570, 577); }
                  break;
               case 157:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(578, 586); }
                  break;
               case 158:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(587, 596); }
                  break;
               case 160:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 162:
                  if (curChar == 92)
                     { jjAddStates(2308, 2311); }
                  break;
               case 166:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 167:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(605, 610); }
                  break;
               case 170:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(611, 619); }
                  break;
               case 171:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(620, 624); }
                  break;
               case 172:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(625, 630); }
                  break;
               case 173:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(631, 637); }
                  break;
               case 174:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(638, 645); }
                  break;
               case 176:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 178:
                  if (curChar == 92)
                     { jjAddStates(2312, 2315); }
                  break;
               case 182:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 183:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(649, 654); }
                  break;
               case 186:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(655, 663); }
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(664, 668); }
                  break;
               case 188:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(669, 674); }
                  break;
               case 189:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(675, 681); }
                  break;
               case 190:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(682, 689); }
                  break;
               case 191:
                  if (curChar == 92)
                     { jjCheckNAddStates(2316, 2319); }
                  break;
               case 192:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(356, 361); }
                  break;
               case 193:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(690, 697); }
                  break;
               case 197:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(707, 717); }
                  break;
               case 198:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(718, 724); }
                  break;
               case 199:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(725, 732); }
                  break;
               case 200:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(733, 741); }
                  break;
               case 201:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(742, 751); }
                  break;
               case 202:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(192, 203); }
                  break;
               case 203:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(752, 759); }
                  break;
               case 205:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(760, 770); }
                  break;
               case 206:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(771, 777); }
                  break;
               case 207:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(778, 785); }
                  break;
               case 208:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(786, 794); }
                  break;
               case 209:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(795, 804); }
                  break;
               case 210:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 211:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 220:
                  { jjAddStates(2320, 2321); }
                  break;
               case 222:
               case 223:
                  { jjCheckNAddTwoStates(223, 224); }
                  break;
               case 228:
               case 229:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(820, 823); }
                  break;
               case 232:
                  { jjAddStates(2322, 2323); }
                  break;
               case 234:
               case 235:
                  { jjCheckNAddTwoStates(235, 236); }
                  break;
               case 240:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(241, 242); }
                  break;
               case 241:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(820, 823); }
                  break;
               case 242:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(833, 838); }
                  break;
               case 246:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(845, 853); }
                  break;
               case 247:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(854, 858); }
                  break;
               case 248:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(859, 864); }
                  break;
               case 249:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(865, 871); }
                  break;
               case 250:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(872, 879); }
                  break;
               case 251:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(241, 252); }
                  break;
               case 252:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(880, 885); }
                  break;
               case 254:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(886, 894); }
                  break;
               case 255:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(895, 899); }
                  break;
               case 256:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(900, 905); }
                  break;
               case 257:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(906, 912); }
                  break;
               case 258:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(913, 920); }
                  break;
               case 262:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 266:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 270:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 272:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 274:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 277:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2290, 2291); }
                  break;
               case 288:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjAddStates(930, 935); }
                  break;
               case 289:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 290:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 291:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 292:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(293); }
                  break;
               case 293:
                  if ((0x7e0000007eL & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 294:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 295:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 296:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 297:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 298:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 299:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 300:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 302:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 303:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 306:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 315:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(316, 322); }
                  break;
               case 317:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 318:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(946, 949); }
                  break;
               case 319:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAdd(293); }
                  break;
               case 320:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddTwoStates(293, 319); }
                  break;
               case 321:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  { jjCheckNAddStates(950, 952); }
                  break;
               case 322:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(953, 957); }
                  break;
               case 323:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(316); }
                  break;
               case 324:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(323, 316); }
                  break;
               case 325:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(958, 960); }
                  break;
               case 326:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(961, 964); }
                  break;
               case 327:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(2286, 2289); }
                  break;
               case 328:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(2324, 2325); }
                  break;
               case 329:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(330); }
                  break;
               case 331:
                  if (curChar == 92)
                     { jjAddStates(2326, 2328); }
                  break;
               case 332:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(2329, 2331); }
                  break;
               case 342:
                  if (curChar == 92)
                     { jjAddStates(2332, 2334); }
                  break;
               case 353:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(2335, 2336); }
                  break;
               case 354:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(355); }
                  break;
               case 357:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 361:
                  { jjAddStates(2337, 2338); }
                  break;
               case 363:
               case 364:
                  { jjCheckNAddTwoStates(364, 365); }
                  break;
               case 369:
                  if (curChar == 92)
                     { jjAddStates(2339, 2342); }
                  break;
               case 373:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 374:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1011, 1016); }
                  break;
               case 377:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1017, 1025); }
                  break;
               case 378:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1026, 1030); }
                  break;
               case 379:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1031, 1036); }
                  break;
               case 380:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1037, 1043); }
                  break;
               case 381:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1044, 1051); }
                  break;
               case 383:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 385:
                  if (curChar == 92)
                     { jjAddStates(2343, 2346); }
                  break;
               case 389:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 390:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1055, 1060); }
                  break;
               case 393:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1061, 1069); }
                  break;
               case 394:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1070, 1074); }
                  break;
               case 395:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1075, 1080); }
                  break;
               case 396:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1081, 1087); }
                  break;
               case 397:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1088, 1095); }
                  break;
               case 398:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1096, 1099); }
                  break;
               case 399:
                  if (curChar == 92)
                     { jjAddStates(2347, 2348); }
                  break;
               case 400:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1096, 1099); }
                  break;
               case 401:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1100, 1105); }
                  break;
               case 405:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1112, 1120); }
                  break;
               case 406:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1121, 1125); }
                  break;
               case 407:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1126, 1131); }
                  break;
               case 408:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1132, 1138); }
                  break;
               case 409:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1139, 1146); }
                  break;
               case 412:
                  { jjAddStates(2349, 2350); }
                  break;
               case 414:
               case 415:
                  { jjCheckNAddTwoStates(415, 416); }
                  break;
               case 419:
                  if (curChar == 92)
                     { jjAddStates(2351, 2353); }
                  break;
               case 420:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(2354, 2356); }
                  break;
               case 430:
                  if (curChar == 92)
                     { jjAddStates(2357, 2359); }
                  break;
               case 441:
                  if (curChar == 92)
                     { jjCheckNAddStates(2273, 2282); }
                  break;
               case 448:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 449:
               case 648:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 450:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(448, 451); }
                  break;
               case 451:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1201, 1205); }
                  break;
               case 455:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1206, 1213); }
                  break;
               case 456:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1214, 1217); }
                  break;
               case 457:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1218, 1222); }
                  break;
               case 458:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1223, 1228); }
                  break;
               case 459:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1229, 1235); }
                  break;
               case 460:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1236, 1240); }
                  break;
               case 462:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1241, 1248); }
                  break;
               case 463:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1249, 1252); }
                  break;
               case 464:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1253, 1257); }
                  break;
               case 465:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1258, 1263); }
                  break;
               case 466:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(1264, 1270); }
                  break;
               case 473:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 474:
               case 671:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 476:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(473, 477); }
                  break;
               case 477:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1278, 1283); }
                  break;
               case 481:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1284, 1292); }
                  break;
               case 482:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1293, 1297); }
                  break;
               case 483:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1298, 1303); }
                  break;
               case 484:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1304, 1310); }
                  break;
               case 485:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1311, 1318); }
                  break;
               case 486:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1319, 1324); }
                  break;
               case 488:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1325, 1333); }
                  break;
               case 489:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1334, 1338); }
                  break;
               case 490:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1339, 1344); }
                  break;
               case 491:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1345, 1351); }
                  break;
               case 492:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1352, 1359); }
                  break;
               case 503:
                  { jjAddStates(2360, 2361); }
                  break;
               case 505:
               case 506:
                  { jjCheckNAddTwoStates(506, 507); }
                  break;
               case 512:
                  { jjAddStates(2362, 2363); }
                  break;
               case 514:
               case 515:
                  { jjCheckNAddTwoStates(515, 516); }
                  break;
               case 520:
                  if (curChar == 126)
                     { jjCheckNAdd(521); }
                  break;
               case 523:
                  { jjAddStates(2364, 2365); }
                  break;
               case 525:
               case 526:
                  { jjCheckNAddTwoStates(526, 527); }
                  break;
               case 532:
                  { jjAddStates(2366, 2367); }
                  break;
               case 534:
               case 535:
                  { jjCheckNAddTwoStates(535, 536); }
                  break;
               case 541:
                  { jjAddStates(2368, 2369); }
                  break;
               case 543:
               case 544:
                  { jjCheckNAddTwoStates(544, 545); }
                  break;
               case 550:
                  { jjAddStates(2370, 2371); }
                  break;
               case 552:
               case 553:
                  { jjCheckNAddTwoStates(553, 554); }
                  break;
               case 559:
                  { jjAddStates(2372, 2373); }
                  break;
               case 561:
               case 562:
                  { jjCheckNAddTwoStates(562, 563); }
                  break;
               case 568:
                  { jjAddStates(2374, 2375); }
                  break;
               case 570:
               case 571:
                  { jjCheckNAddTwoStates(571, 572); }
                  break;
               case 576:
                  if (curChar == 126 && kind > 37)
                     kind = 37;
                  break;
               case 578:
                  { jjAddStates(2376, 2377); }
                  break;
               case 580:
               case 581:
                  { jjCheckNAddTwoStates(581, 582); }
                  break;
               case 586:
                  if (curChar != 126)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAdd(521); }
                  break;
               case 588:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 590:
                  if (curChar == 92)
                     { jjAddStates(2378, 2381); }
                  break;
               case 594:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 595:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1465, 1470); }
                  break;
               case 598:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1471, 1479); }
                  break;
               case 599:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1480, 1484); }
                  break;
               case 600:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1485, 1490); }
                  break;
               case 601:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1491, 1497); }
                  break;
               case 602:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1498, 1505); }
                  break;
               case 603:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 604:
                  if (curChar == 92)
                     { jjAddStates(2382, 2385); }
                  break;
               case 608:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 609:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1506, 1510); }
                  break;
               case 612:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1511, 1518); }
                  break;
               case 613:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1519, 1522); }
                  break;
               case 614:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1523, 1527); }
                  break;
               case 615:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1528, 1533); }
                  break;
               case 616:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1534, 1540); }
                  break;
               case 618:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 620:
                  if (curChar == 92)
                     { jjAddStates(2386, 2389); }
                  break;
               case 624:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 625:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1544, 1549); }
                  break;
               case 628:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1550, 1558); }
                  break;
               case 629:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1559, 1563); }
                  break;
               case 630:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1564, 1569); }
                  break;
               case 631:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1570, 1576); }
                  break;
               case 632:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1577, 1584); }
                  break;
               case 633:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 634:
                  if (curChar == 92)
                     { jjAddStates(2390, 2393); }
                  break;
               case 638:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 639:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1585, 1589); }
                  break;
               case 642:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1590, 1597); }
                  break;
               case 643:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1598, 1601); }
                  break;
               case 644:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1602, 1606); }
                  break;
               case 645:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1607, 1612); }
                  break;
               case 646:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddStates(1613, 1619); }
                  break;
               case 650:
               case 651:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 652:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(653, 654); }
                  break;
               case 653:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 654:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1622, 1626); }
                  break;
               case 658:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1627, 1634); }
                  break;
               case 659:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1635, 1638); }
                  break;
               case 660:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1639, 1643); }
                  break;
               case 661:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1644, 1649); }
                  break;
               case 662:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1650, 1656); }
                  break;
               case 663:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(653, 664); }
                  break;
               case 664:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1657, 1661); }
                  break;
               case 666:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1662, 1669); }
                  break;
               case 667:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1670, 1673); }
                  break;
               case 668:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1674, 1678); }
                  break;
               case 669:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1679, 1684); }
                  break;
               case 670:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(1685, 1691); }
                  break;
               case 672:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(473, 486); }
                  break;
               case 673:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(448, 460); }
                  break;
               case 674:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(2268, 2272); }
                  break;
               case 677:
               case 678:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 679:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(680, 681); }
                  break;
               case 680:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 681:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1692, 1696); }
                  break;
               case 685:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1697, 1704); }
                  break;
               case 686:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1705, 1708); }
                  break;
               case 687:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1709, 1713); }
                  break;
               case 688:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1714, 1719); }
                  break;
               case 689:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1720, 1726); }
                  break;
               case 690:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(680, 691); }
                  break;
               case 691:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1727, 1731); }
                  break;
               case 693:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1732, 1739); }
                  break;
               case 694:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1740, 1743); }
                  break;
               case 695:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1744, 1748); }
                  break;
               case 696:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1749, 1754); }
                  break;
               case 697:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddStates(1755, 1761); }
                  break;
               case 698:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 699:
                  if (curChar == 92)
                     { jjAddStates(2394, 2395); }
                  break;
               case 700:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 701:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1762, 1766); }
                  break;
               case 705:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1767, 1774); }
                  break;
               case 706:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1775, 1778); }
                  break;
               case 707:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1779, 1783); }
                  break;
               case 708:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1784, 1789); }
                  break;
               case 709:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddStates(1790, 1796); }
                  break;
               case 712:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2396, 2397); }
                  break;
               case 715:
                  if ((0x200000002000L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 716:
               case 757:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(715); }
                  break;
               case 718:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2398, 2399); }
                  break;
               case 721:
                  if ((0x100000001000000L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 722:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 721;
                  break;
               case 724:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2400, 2401); }
                  break;
               case 727:
                  if ((0x1000000010000L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 728:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 727;
                  break;
               case 729:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 728;
                  break;
               case 731:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2402, 2403); }
                  break;
               case 734:
                  if ((0x10000000100L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 735:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(734); }
                  break;
               case 737:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2404, 2405); }
                  break;
               case 740:
                  if ((0x800000008L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 741:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 740;
                  break;
               case 743:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2406, 2407); }
                  break;
               case 746:
               case 751:
                  if ((0x100000001000L & l) != 0L)
                     { jjCheckNAdd(734); }
                  break;
               case 748:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2408, 2409); }
                  break;
               case 752:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 751;
                  break;
               case 754:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2410, 2411); }
                  break;
               case 758:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 757;
                  break;
               case 760:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2412, 2413); }
                  break;
               case 763:
                  if ((0x80000000800000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 764:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 763;
                  break;
               case 766:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2414, 2415); }
                  break;
               case 769:
                  if ((0x10000000100L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 770:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 769;
                  break;
               case 772:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2416, 2417); }
                  break;
               case 775:
                  if ((0x20000000200L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 776:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 775;
                  break;
               case 778:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2418, 2419); }
                  break;
               case 781:
                  if ((0x400000004L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 782:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 781;
                  break;
               case 784:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2420, 2421); }
                  break;
               case 787:
                  if ((0x400000004000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 788:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 787;
                  break;
               case 789:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 788;
                  break;
               case 790:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 789;
                  break;
               case 792:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2422, 2423); }
                  break;
               case 795:
                  if ((0x100000001000000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 796:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 795;
                  break;
               case 797:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 796;
                  break;
               case 798:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 797;
                  break;
               case 800:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2424, 2425); }
                  break;
               case 803:
                  if ((0x200000002000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 804:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(803); }
                  break;
               case 806:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2426, 2427); }
                  break;
               case 809:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(803); }
                  break;
               case 811:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2428, 2429); }
                  break;
               case 814:
                  if ((0x2000000020000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 816:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2430, 2431); }
                  break;
               case 819:
                  if ((0x400000004000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 820:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 819;
                  break;
               case 822:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2432, 2433); }
                  break;
               case 825:
                  if ((0x10000000100000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 826:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 825;
                  break;
               case 828:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2434, 2435); }
                  break;
               case 831:
                  if ((0x800000008L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 832:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 831;
                  break;
               case 834:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2436, 2437); }
                  break;
               case 837:
                  if ((0x100000001000000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 838:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 837;
                  break;
               case 840:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2438, 2439); }
                  break;
               case 843:
                  if ((0x4000000040000L & l) != 0L && kind > 68)
                     kind = 68;
                  break;
               case 844:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 843;
                  break;
               case 846:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2440, 2441); }
                  break;
               case 849:
                  if ((0x8000000080L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 850:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 849;
                  break;
               case 851:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 850;
                  break;
               case 852:
                  if ((0x1000000010L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 853:
               case 856:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(852); }
                  break;
               case 854:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 853;
                  break;
               case 855:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 854;
                  break;
               case 857:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 856;
                  break;
               case 858:
                  if ((0x400000004000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 859:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 858;
                  break;
               case 860:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 859;
                  break;
               case 861:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 860;
                  break;
               case 863:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2442, 2443); }
                  break;
               case 866:
                  if ((0x400000004L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 867:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 866;
                  break;
               case 869:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2444, 2445); }
                  break;
               case 872:
                  if ((0x10000000100000L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 873:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 872;
                  break;
               case 875:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2446, 2447); }
                  break;
               case 878:
               case 880:
                  if ((0x8000000080000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 879:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 878;
                  break;
               case 882:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2448, 2449); }
                  break;
               case 885:
                  if ((0x400000004000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 886:
               case 887:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(885); }
                  break;
               case 888:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 887;
                  break;
               case 890:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2450, 2451); }
                  break;
               case 893:
               case 900:
                  if ((0x100000001000000L & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 894:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(2452, 2454); }
                  break;
               case 895:
                  if ((0x20000000200L & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 896:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 895;
                  break;
               case 897:
                  if ((0x200000002000L & l) != 0L && kind > 74)
                     kind = 74;
                  break;
               case 898:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 897;
                  break;
               case 899:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 898;
                  break;
               case 901:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 900;
                  break;
               case 902:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 901;
                  break;
               case 904:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2455, 2456); }
                  break;
               case 907:
                  if ((0x400000004000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 909:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2457, 2458); }
                  break;
               case 912:
               case 913:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 915:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 914;
                  break;
               case 916:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(917, 918); }
                  break;
               case 917:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 918:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1914, 1919); }
                  break;
               case 922:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1920, 1928); }
                  break;
               case 923:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1929, 1933); }
                  break;
               case 924:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1934, 1939); }
                  break;
               case 925:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1940, 1946); }
                  break;
               case 926:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1947, 1954); }
                  break;
               case 927:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(917, 928); }
                  break;
               case 928:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1955, 1960); }
                  break;
               case 930:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1961, 1969); }
                  break;
               case 931:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1970, 1974); }
                  break;
               case 932:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1975, 1980); }
                  break;
               case 933:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1981, 1987); }
                  break;
               case 934:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1988, 1995); }
                  break;
               case 936:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2459, 2460); }
                  break;
               case 939:
               case 940:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 941:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(942, 943); }
                  break;
               case 942:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 943:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2003, 2007); }
                  break;
               case 947:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2008, 2015); }
                  break;
               case 948:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2016, 2019); }
                  break;
               case 949:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2020, 2024); }
                  break;
               case 950:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2025, 2030); }
                  break;
               case 951:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2031, 2037); }
                  break;
               case 952:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(942, 953); }
                  break;
               case 953:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2038, 2042); }
                  break;
               case 955:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2043, 2050); }
                  break;
               case 956:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2051, 2054); }
                  break;
               case 957:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2055, 2059); }
                  break;
               case 958:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2060, 2065); }
                  break;
               case 959:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddStates(2066, 2072); }
                  break;
               case 961:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2461, 2462); }
                  break;
               case 966:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(2463, 2464); }
                  break;
               case 970:
               case 971:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 972:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(973, 974); }
                  break;
               case 973:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 974:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2076, 2080); }
                  break;
               case 978:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2081, 2088); }
                  break;
               case 979:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2089, 2092); }
                  break;
               case 980:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2093, 2097); }
                  break;
               case 981:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2098, 2103); }
                  break;
               case 982:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2104, 2110); }
                  break;
               case 983:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(973, 984); }
                  break;
               case 984:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2111, 2115); }
                  break;
               case 986:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2116, 2123); }
                  break;
               case 987:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2124, 2127); }
                  break;
               case 988:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2128, 2132); }
                  break;
               case 989:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2133, 2138); }
                  break;
               case 990:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddStates(2139, 2145); }
                  break;
               case 994:
                  { jjAddStates(2465, 2466); }
                  break;
               case 996:
               case 997:
                  { jjCheckNAddTwoStates(997, 998); }
                  break;
               case 1001:
                  if ((0x10000000100000L & l) != 0L && kind > 80)
                     kind = 80;
                  break;
               case 1002:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1001;
                  break;
               case 1003:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1002;
                  break;
               case 1004:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1003;
                  break;
               case 1005:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1004;
                  break;
               case 1006:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1005;
                  break;
               case 1007:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1006;
                  break;
               case 1008:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1007;
                  break;
               case 1009:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1008;
                  break;
               case 1012:
                  { jjAddStates(2467, 2468); }
                  break;
               case 1014:
               case 1015:
                  { jjCheckNAddTwoStates(1015, 1016); }
                  break;
               case 1019:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjstateSet[jjnewStateCnt++] = 1020;
                  break;
               case 1021:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1019;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddStates(2268, 2272); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2292, 2293); }
                  break;
               case 3:
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(271, 272); }
                  break;
               case 55:
               case 56:
               case 58:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 85:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2298, 2299); }
                  break;
               case 87:
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 93:
               case 94:
               case 192:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(356, 361); }
                  break;
               case 97:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2300, 2301); }
                  break;
               case 99:
               case 100:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(100, 101); }
                  break;
               case 105:
               case 106:
               case 122:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(374, 376); }
                  break;
               case 109:
               case 110:
               case 141:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(382, 387); }
                  break;
               case 113:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2302, 2303); }
                  break;
               case 115:
               case 116:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(116, 117); }
                  break;
               case 160:
               case 166:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(597, 599); }
                  break;
               case 176:
               case 182:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(646, 648); }
                  break;
               case 220:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2320, 2321); }
                  break;
               case 222:
               case 223:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(223, 224); }
                  break;
               case 228:
               case 229:
               case 241:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(820, 823); }
                  break;
               case 232:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2322, 2323); }
                  break;
               case 234:
               case 235:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(235, 236); }
                  break;
               case 357:
               case 373:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(999, 1001); }
                  break;
               case 361:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2337, 2338); }
                  break;
               case 363:
               case 364:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(364, 365); }
                  break;
               case 383:
               case 389:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1052, 1054); }
                  break;
               case 398:
               case 400:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1096, 1099); }
                  break;
               case 412:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2349, 2350); }
                  break;
               case 414:
               case 415:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(415, 416); }
                  break;
               case 448:
               case 449:
               case 648:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  { jjCheckNAddTwoStates(449, 450); }
                  break;
               case 473:
               case 474:
               case 671:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1275, 1277); }
                  break;
               case 503:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2360, 2361); }
                  break;
               case 505:
               case 506:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(506, 507); }
                  break;
               case 512:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2362, 2363); }
                  break;
               case 514:
               case 515:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(515, 516); }
                  break;
               case 523:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2364, 2365); }
                  break;
               case 525:
               case 526:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(526, 527); }
                  break;
               case 532:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2366, 2367); }
                  break;
               case 534:
               case 535:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(535, 536); }
                  break;
               case 541:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2368, 2369); }
                  break;
               case 543:
               case 544:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(544, 545); }
                  break;
               case 550:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2370, 2371); }
                  break;
               case 552:
               case 553:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(553, 554); }
                  break;
               case 559:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2372, 2373); }
                  break;
               case 561:
               case 562:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(562, 563); }
                  break;
               case 568:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2374, 2375); }
                  break;
               case 570:
               case 571:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(571, 572); }
                  break;
               case 578:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2376, 2377); }
                  break;
               case 580:
               case 581:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(581, 582); }
                  break;
               case 588:
               case 594:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1462, 1464); }
                  break;
               case 603:
               case 608:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(603, 604); }
                  break;
               case 618:
               case 624:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 633:
               case 638:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAddTwoStates(633, 634); }
                  break;
               case 650:
               case 651:
               case 653:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddTwoStates(651, 652); }
                  break;
               case 677:
               case 678:
               case 680:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  { jjCheckNAddTwoStates(678, 679); }
                  break;
               case 698:
               case 700:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 912:
               case 913:
               case 917:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1911, 1913); }
                  break;
               case 939:
               case 940:
               case 942:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 77)
                     kind = 77;
                  { jjCheckNAddTwoStates(940, 941); }
                  break;
               case 970:
               case 971:
               case 973:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAddTwoStates(971, 972); }
                  break;
               case 994:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2465, 2466); }
                  break;
               case 996:
               case 997:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(997, 998); }
                  break;
               case 1012:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(2467, 2468); }
                  break;
               case 1014:
               case 1015:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(1015, 1016); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1122 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   1023, 1024, 1025, 712, 716, 1026, 1027, 1028, 718, 722, 1029, 1030, 1031, 724, 729, 1032, 
   1033, 1034, 731, 735, 1035, 1036, 1037, 737, 741, 1038, 1039, 1040, 743, 746, 1041, 1042, 
   1043, 748, 752, 1044, 1045, 1046, 754, 758, 1047, 1048, 1049, 760, 764, 1050, 1051, 1052, 
   766, 770, 1053, 1054, 1055, 772, 776, 1056, 1057, 1058, 778, 782, 1059, 1060, 1061, 784, 
   790, 1062, 1063, 1064, 792, 798, 1065, 1066, 1067, 800, 804, 1068, 1069, 1070, 806, 809, 
   1071, 1072, 1073, 811, 814, 1074, 1075, 1076, 816, 820, 1077, 1078, 1079, 822, 826, 1080, 
   1081, 1082, 828, 832, 1083, 1084, 1085, 834, 838, 1086, 1087, 1088, 840, 844, 1089, 1090, 
   1091, 846, 851, 855, 857, 861, 1092, 1093, 1094, 863, 867, 1095, 1096, 1097, 869, 873, 
   1098, 1099, 1100, 875, 879, 880, 1101, 1102, 1103, 882, 886, 888, 1104, 1105, 1106, 890, 
   893, 1107, 1108, 1109, 904, 907, 1110, 1111, 1112, 909, 912, 1113, 1114, 1115, 936, 939, 
   1116, 1117, 1118, 961, 964, 1119, 1120, 1121, 966, 952, 927, 894, 509, 510, 518, 519, 
   520, 529, 530, 8, 538, 539, 9, 547, 548, 10, 556, 557, 12, 565, 566, 13, 
   574, 575, 576, 584, 585, 15, 992, 1009, 1010, 1021, 711, 717, 723, 730, 736, 742, 
   747, 753, 759, 765, 771, 777, 783, 791, 799, 805, 810, 815, 821, 827, 833, 839, 
   845, 862, 868, 874, 881, 889, 903, 908, 935, 960, 965, 969, 970, 983, 676, 677, 
   698, 699, 690, 648, 649, 671, 672, 673, 618, 619, 633, 634, 620, 588, 589, 603, 
   604, 590, 268, 279, 216, 83, 92, 93, 202, 2, 3, 6, 3, 5, 6, 18, 
   19, 55, 68, 56, 61, 62, 57, 63, 56, 64, 61, 62, 57, 65, 66, 67, 
   56, 61, 62, 57, 56, 64, 61, 62, 57, 56, 64, 61, 62, 57, 65, 56, 
   64, 61, 62, 57, 65, 66, 70, 62, 56, 57, 71, 72, 70, 62, 56, 57, 
   73, 74, 75, 70, 62, 56, 57, 72, 70, 62, 56, 57, 72, 70, 62, 56, 
   57, 73, 72, 70, 62, 56, 57, 73, 74, 91, 92, 93, 202, 83, 86, 87, 
   90, 87, 89, 90, 94, 95, 104, 105, 120, 191, 103, 104, 105, 120, 121, 95, 
   98, 99, 102, 99, 101, 102, 106, 107, 123, 108, 109, 159, 175, 151, 104, 105, 
   110, 111, 120, 140, 104, 105, 119, 120, 121, 111, 114, 115, 118, 115, 117, 118, 
   106, 126, 127, 107, 123, 128, 106, 129, 126, 127, 107, 123, 130, 131, 132, 106, 
   126, 127, 107, 123, 106, 129, 126, 127, 107, 123, 106, 129, 126, 127, 107, 123, 
   130, 106, 129, 126, 127, 107, 123, 130, 131, 134, 127, 106, 107, 123, 135, 136, 
   134, 127, 106, 107, 123, 137, 138, 139, 134, 127, 106, 107, 123, 136, 134, 127, 
   106, 107, 123, 136, 134, 127, 106, 107, 123, 137, 136, 134, 127, 106, 107, 123, 
   137, 138, 104, 105, 110, 144, 120, 140, 145, 146, 104, 105, 110, 111, 119, 120, 
   121, 111, 140, 104, 105, 110, 147, 144, 120, 140, 145, 148, 149, 150, 104, 105, 
   110, 144, 120, 140, 145, 104, 105, 110, 147, 144, 120, 140, 145, 104, 105, 110, 
   147, 144, 120, 140, 145, 148, 104, 105, 110, 147, 144, 120, 140, 145, 148, 149, 
   104, 105, 153, 110, 120, 140, 145, 154, 104, 105, 155, 153, 110, 120, 140, 145, 
   156, 157, 158, 104, 105, 153, 110, 120, 140, 145, 104, 105, 155, 153, 110, 120, 
   140, 145, 104, 105, 155, 153, 110, 120, 140, 145, 156, 104, 105, 155, 153, 110, 
   120, 140, 145, 156, 157, 160, 161, 162, 104, 105, 111, 120, 121, 160, 168, 169, 
   161, 162, 170, 160, 171, 168, 169, 161, 162, 172, 173, 174, 160, 168, 169, 161, 
   162, 160, 171, 168, 169, 161, 162, 160, 171, 168, 169, 161, 162, 172, 160, 171, 
   168, 169, 161, 162, 172, 173, 176, 177, 178, 176, 184, 185, 177, 178, 186, 176, 
   187, 184, 185, 177, 178, 188, 189, 190, 176, 184, 185, 177, 178, 176, 187, 184, 
   185, 177, 178, 176, 187, 184, 185, 177, 178, 188, 176, 187, 184, 185, 177, 178, 
   188, 189, 94, 195, 104, 105, 120, 191, 196, 197, 94, 95, 103, 104, 105, 120, 
   121, 95, 191, 94, 198, 195, 104, 105, 120, 191, 196, 199, 200, 201, 94, 195, 
   104, 105, 120, 191, 196, 94, 198, 195, 104, 105, 120, 191, 196, 94, 198, 195, 
   104, 105, 120, 191, 196, 199, 94, 198, 195, 104, 105, 120, 191, 196, 199, 200, 
   204, 94, 104, 105, 120, 191, 196, 205, 206, 204, 94, 104, 105, 120, 191, 196, 
   207, 208, 209, 204, 94, 104, 105, 120, 191, 196, 206, 204, 94, 104, 105, 120, 
   191, 196, 206, 204, 94, 104, 105, 120, 191, 196, 207, 206, 204, 94, 104, 105, 
   120, 191, 196, 207, 208, 218, 227, 228, 251, 226, 227, 228, 251, 218, 221, 222, 
   225, 222, 224, 225, 229, 230, 239, 240, 238, 239, 230, 233, 234, 237, 234, 236, 
   237, 229, 244, 239, 240, 245, 246, 229, 230, 238, 239, 230, 240, 229, 247, 244, 
   239, 240, 245, 248, 249, 250, 229, 244, 239, 240, 245, 229, 247, 244, 239, 240, 
   245, 229, 247, 244, 239, 240, 245, 248, 229, 247, 244, 239, 240, 245, 248, 249, 
   253, 229, 239, 240, 245, 254, 255, 253, 229, 239, 240, 245, 256, 257, 258, 253, 
   229, 239, 240, 245, 255, 253, 229, 239, 240, 245, 255, 253, 229, 239, 240, 245, 
   256, 255, 253, 229, 239, 240, 245, 256, 257, 282, 288, 284, 285, 286, 287, 284, 
   285, 286, 289, 294, 298, 302, 306, 310, 284, 308, 309, 284, 311, 312, 313, 284, 
   311, 312, 293, 319, 320, 321, 293, 319, 320, 323, 316, 324, 325, 326, 323, 316, 
   324, 323, 316, 324, 325, 339, 336, 337, 340, 341, 339, 336, 337, 339, 336, 337, 
   340, 345, 346, 329, 331, 350, 347, 348, 351, 352, 350, 347, 348, 350, 347, 348, 
   351, 356, 382, 398, 368, 399, 410, 357, 358, 369, 367, 368, 359, 362, 363, 366, 
   363, 365, 366, 357, 375, 376, 358, 369, 377, 357, 378, 375, 376, 358, 369, 379, 
   380, 381, 357, 375, 376, 358, 369, 357, 378, 375, 376, 358, 369, 357, 378, 375, 
   376, 358, 369, 379, 357, 378, 375, 376, 358, 369, 379, 380, 383, 384, 385, 383, 
   391, 392, 384, 385, 393, 383, 394, 391, 392, 384, 385, 395, 396, 397, 383, 391, 
   392, 384, 385, 383, 394, 391, 392, 384, 385, 383, 394, 391, 392, 384, 385, 395, 
   383, 394, 391, 392, 384, 385, 395, 396, 398, 359, 368, 399, 398, 403, 368, 399, 
   404, 405, 398, 359, 367, 368, 359, 399, 398, 406, 403, 368, 399, 404, 407, 408, 
   409, 398, 403, 368, 399, 404, 398, 406, 403, 368, 399, 404, 398, 406, 403, 368, 
   399, 404, 407, 398, 406, 403, 368, 399, 404, 407, 408, 418, 356, 382, 398, 367, 
   368, 359, 399, 410, 413, 414, 417, 414, 416, 417, 418, 356, 382, 398, 368, 399, 
   410, 427, 424, 425, 428, 429, 427, 424, 425, 427, 424, 425, 428, 433, 434, 354, 
   419, 438, 435, 436, 439, 440, 438, 435, 436, 438, 435, 436, 439, 444, 445, 328, 
   342, 449, 453, 454, 450, 455, 449, 456, 453, 454, 450, 457, 458, 459, 449, 453, 
   454, 450, 449, 456, 453, 454, 450, 449, 456, 453, 454, 450, 457, 449, 456, 453, 
   454, 450, 457, 458, 461, 454, 449, 450, 462, 463, 461, 454, 449, 450, 464, 465, 
   466, 461, 454, 449, 450, 463, 461, 454, 449, 450, 463, 461, 454, 449, 450, 464, 
   463, 461, 454, 449, 450, 464, 465, 469, 470, 353, 430, 474, 475, 476, 474, 479, 
   480, 475, 476, 481, 474, 482, 479, 480, 475, 476, 483, 484, 485, 474, 479, 480, 
   475, 476, 474, 482, 479, 480, 475, 476, 474, 482, 479, 480, 475, 476, 483, 474, 
   482, 479, 480, 475, 476, 483, 484, 487, 480, 474, 475, 476, 488, 489, 487, 480, 
   474, 475, 476, 490, 491, 492, 487, 480, 474, 475, 476, 489, 487, 480, 474, 475, 
   476, 489, 487, 480, 474, 475, 476, 490, 489, 487, 480, 474, 475, 476, 490, 491, 
   494, 471, 472, 495, 496, 494, 471, 472, 494, 471, 472, 495, 498, 446, 447, 499, 
   500, 498, 446, 447, 498, 446, 447, 499, 504, 505, 508, 505, 507, 508, 513, 514, 
   517, 514, 516, 517, 518, 519, 520, 524, 525, 528, 525, 527, 528, 529, 530, 8, 
   533, 534, 537, 534, 536, 537, 538, 539, 9, 542, 543, 546, 543, 545, 546, 547, 
   548, 10, 551, 552, 555, 552, 554, 555, 556, 557, 12, 560, 561, 564, 561, 563, 
   564, 565, 566, 13, 569, 570, 573, 570, 572, 573, 574, 575, 576, 579, 580, 583, 
   580, 582, 583, 584, 585, 15, 588, 589, 590, 588, 596, 597, 589, 590, 598, 588, 
   599, 596, 597, 589, 590, 600, 601, 602, 588, 596, 597, 589, 590, 588, 599, 596, 
   597, 589, 590, 588, 599, 596, 597, 589, 590, 600, 588, 599, 596, 597, 589, 590, 
   600, 601, 603, 610, 611, 604, 612, 603, 613, 610, 611, 604, 614, 615, 616, 603, 
   610, 611, 604, 603, 613, 610, 611, 604, 603, 613, 610, 611, 604, 614, 603, 613, 
   610, 611, 604, 614, 615, 618, 619, 620, 618, 626, 627, 619, 620, 628, 618, 629, 
   626, 627, 619, 620, 630, 631, 632, 618, 626, 627, 619, 620, 618, 629, 626, 627, 
   619, 620, 618, 629, 626, 627, 619, 620, 630, 618, 629, 626, 627, 619, 620, 630, 
   631, 633, 640, 641, 634, 642, 633, 643, 640, 641, 634, 644, 645, 646, 633, 640, 
   641, 634, 633, 643, 640, 641, 634, 633, 643, 640, 641, 634, 644, 633, 643, 640, 
   641, 634, 644, 645, 650, 663, 651, 656, 657, 652, 658, 651, 659, 656, 657, 652, 
   660, 661, 662, 651, 656, 657, 652, 651, 659, 656, 657, 652, 651, 659, 656, 657, 
   652, 660, 651, 659, 656, 657, 652, 660, 661, 665, 657, 651, 652, 666, 667, 665, 
   657, 651, 652, 668, 669, 670, 665, 657, 651, 652, 667, 665, 657, 651, 652, 667, 
   665, 657, 651, 652, 668, 667, 665, 657, 651, 652, 668, 669, 678, 683, 684, 679, 
   685, 678, 686, 683, 684, 679, 687, 688, 689, 678, 683, 684, 679, 678, 686, 683, 
   684, 679, 678, 686, 683, 684, 679, 687, 678, 686, 683, 684, 679, 687, 688, 692, 
   684, 678, 679, 693, 694, 692, 684, 678, 679, 695, 696, 697, 692, 684, 678, 679, 
   694, 692, 684, 678, 679, 694, 692, 684, 678, 679, 695, 694, 692, 684, 678, 679, 
   695, 696, 698, 703, 704, 699, 705, 698, 706, 703, 704, 699, 707, 708, 709, 698, 
   703, 704, 699, 698, 706, 703, 704, 699, 698, 706, 703, 704, 699, 707, 698, 706, 
   703, 704, 699, 707, 708, 711, 712, 716, 717, 718, 722, 723, 724, 729, 730, 731, 
   735, 736, 737, 741, 742, 743, 746, 747, 748, 752, 753, 754, 758, 759, 760, 764, 
   765, 766, 770, 771, 772, 776, 777, 778, 782, 783, 784, 790, 791, 792, 798, 799, 
   800, 804, 805, 806, 809, 810, 811, 814, 815, 816, 820, 821, 822, 826, 827, 828, 
   832, 833, 834, 838, 839, 840, 844, 845, 846, 851, 855, 857, 861, 848, 851, 855, 
   857, 861, 862, 863, 867, 868, 869, 873, 874, 875, 879, 880, 877, 879, 880, 881, 
   882, 886, 888, 884, 886, 888, 889, 890, 893, 894, 892, 893, 894, 903, 904, 907, 
   908, 909, 912, 927, 911, 912, 927, 913, 915, 916, 913, 920, 921, 915, 916, 922, 
   913, 923, 920, 921, 915, 916, 924, 925, 926, 913, 920, 921, 915, 916, 913, 923, 
   920, 921, 915, 916, 913, 923, 920, 921, 915, 916, 924, 913, 923, 920, 921, 915, 
   916, 924, 925, 929, 921, 913, 915, 916, 930, 931, 929, 921, 913, 915, 916, 932, 
   933, 934, 929, 921, 913, 915, 916, 931, 929, 921, 913, 915, 916, 931, 929, 921, 
   913, 915, 916, 932, 931, 929, 921, 913, 915, 916, 932, 933, 935, 936, 939, 952, 
   938, 939, 952, 940, 945, 946, 941, 947, 940, 948, 945, 946, 941, 949, 950, 951, 
   940, 945, 946, 941, 940, 948, 945, 946, 941, 940, 948, 945, 946, 941, 949, 940, 
   948, 945, 946, 941, 949, 950, 954, 946, 940, 941, 955, 956, 954, 946, 940, 941, 
   957, 958, 959, 954, 946, 940, 941, 956, 954, 946, 940, 941, 956, 954, 946, 940, 
   941, 957, 956, 954, 946, 940, 941, 957, 958, 960, 961, 964, 971, 976, 977, 972, 
   978, 971, 979, 976, 977, 972, 980, 981, 982, 971, 976, 977, 972, 971, 979, 976, 
   977, 972, 971, 979, 976, 977, 972, 980, 971, 979, 976, 977, 972, 980, 981, 985, 
   977, 971, 972, 986, 987, 985, 977, 971, 972, 988, 989, 990, 985, 977, 971, 972, 
   987, 985, 977, 971, 972, 987, 985, 977, 971, 972, 988, 987, 985, 977, 971, 972, 
   988, 989, 1000, 1009, 992, 995, 996, 999, 996, 998, 999, 1018, 1021, 1010, 1013, 1014, 
   1017, 1014, 1016, 1017, 1023, 712, 716, 1026, 718, 722, 1029, 724, 729, 1032, 731, 735, 
   1035, 737, 741, 1038, 743, 746, 1041, 748, 752, 1044, 754, 758, 1047, 760, 764, 1050, 
   766, 770, 1053, 772, 776, 1056, 778, 782, 1059, 784, 790, 1062, 792, 798, 1065, 800, 
   804, 1068, 806, 809, 1071, 811, 814, 1074, 816, 820, 1077, 822, 826, 1080, 828, 832, 
   1083, 834, 838, 1086, 840, 844, 1089, 846, 851, 855, 857, 861, 1092, 863, 867, 1095, 
   869, 873, 1098, 875, 879, 880, 1101, 882, 886, 888, 1104, 890, 893, 894, 1107, 904, 
   907, 1110, 909, 912, 927, 1113, 936, 939, 952, 1116, 961, 964, 449, 474, 475, 476, 
   450, 446, 447, 448, 460, 471, 472, 473, 486, 493, 497, 54, 55, 68, 328, 342, 
   353, 430, 281, 314, 1, 2, 83, 92, 93, 202, 85, 86, 97, 98, 113, 114, 
   122, 133, 141, 142, 163, 165, 166, 167, 179, 181, 182, 183, 192, 193, 122, 133, 
   220, 221, 232, 233, 329, 331, 336, 337, 338, 334, 335, 330, 347, 348, 349, 354, 
   419, 361, 362, 370, 372, 373, 374, 386, 388, 389, 390, 400, 401, 412, 413, 424, 
   425, 426, 422, 423, 355, 435, 436, 437, 503, 504, 512, 513, 523, 524, 532, 533, 
   541, 542, 550, 551, 559, 560, 568, 569, 578, 579, 591, 593, 594, 595, 605, 607, 
   608, 609, 621, 623, 624, 625, 635, 637, 638, 639, 700, 701, 713, 714, 719, 720, 
   725, 726, 732, 733, 738, 739, 744, 745, 749, 750, 755, 756, 761, 762, 767, 768, 
   773, 774, 779, 780, 785, 786, 793, 794, 801, 802, 807, 808, 812, 813, 817, 818, 
   823, 824, 829, 830, 835, 836, 841, 842, 847, 848, 864, 865, 870, 871, 876, 877, 
   883, 884, 891, 892, 896, 899, 902, 905, 906, 910, 911, 937, 938, 962, 963, 967, 
   968, 994, 995, 1012, 1013, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\57\52", "\74\41\55\55", "\55\55\76", null, "\174\75", null, null, "\55", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\175", "\136\75", "\44\75", "\52\75", "\75", "\73", "\57", "\133", "\135", "\52", 
"\56", "\51", "\50", "\72", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\72\72", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\41", "\44", "\45", "\46", "\140", "\77", 
"\74", "\174", "\74\75", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CssParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CssParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 1122; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffff000001L, 0xf803ffffffffffffL, 0x3fffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[1122];
    private final int[] jjstateSet = new int[2 * 1122];

    
    protected char curChar;
}
